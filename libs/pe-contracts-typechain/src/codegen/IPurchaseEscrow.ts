/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace IPurchaseEscrow {
  export type PurchaseEscrowTermsStruct = {
    status: PromiseOrValue<BigNumberish>;
    token: PromiseOrValue<string>;
    buyer: PromiseOrValue<string>;
    tokenId: PromiseOrValue<BigNumberish>;
    principal: PromiseOrValue<BigNumberish>;
    repayment: PromiseOrValue<BigNumberish>;
    startTime: PromiseOrValue<BigNumberish>;
    duration: PromiseOrValue<BigNumberish>;
    orderHash: PromiseOrValue<BytesLike>;
  };

  export type PurchaseEscrowTermsStructOutput = [
    number,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string
  ] & {
    status: number;
    token: string;
    buyer: string;
    tokenId: BigNumber;
    principal: BigNumber;
    repayment: BigNumber;
    startTime: BigNumber;
    duration: BigNumber;
    orderHash: string;
  };
}

export interface IPurchaseEscrowInterface extends utils.Interface {
  functions: {
    "cancelListing(uint256,uint8,bytes)": FunctionFragment;
    "create(address,address,uint256,uint256,uint256,uint64)": FunctionFragment;
    "createListing(uint256,uint8,uint256,uint256,uint256,bytes)": FunctionFragment;
    "currencyToken()": FunctionFragment;
    "generateListing(uint256,uint8,uint256,uint256,uint256)": FunctionFragment;
    "lenderNoteToken()": FunctionFragment;
    "liquidate(uint256)": FunctionFragment;
    "processSale(uint256,uint8)": FunctionFragment;
    "purchaseEscrows(uint256)": FunctionFragment;
    "repay(uint256)": FunctionFragment;
    "repayETH(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "cancelListing"
      | "create"
      | "createListing"
      | "currencyToken"
      | "generateListing"
      | "lenderNoteToken"
      | "liquidate"
      | "processSale"
      | "purchaseEscrows"
      | "repay"
      | "repayETH"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "cancelListing",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "create",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createListing",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "currencyToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "generateListing",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "lenderNoteToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidate",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "processSale",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "purchaseEscrows",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "repay",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "repayETH",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "cancelListing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "create", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createListing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currencyToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "generateListing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lenderNoteToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "liquidate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "processSale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "purchaseEscrows",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "repay", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "repayETH", data: BytesLike): Result;

  events: {
    "PurchaseEscrowCreated(uint256,address,address,address,uint256,uint256,uint256,uint64)": EventFragment;
    "PurchaseEscrowDelisted(uint256,uint8)": EventFragment;
    "PurchaseEscrowLiquidated(uint256)": EventFragment;
    "PurchaseEscrowListed(uint256,uint8,bytes)": EventFragment;
    "PurchaseEscrowRepaid(uint256)": EventFragment;
    "PurchaseEscrowSold(uint256,uint8)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "PurchaseEscrowCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PurchaseEscrowDelisted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PurchaseEscrowLiquidated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PurchaseEscrowListed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PurchaseEscrowRepaid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PurchaseEscrowSold"): EventFragment;
}

export interface PurchaseEscrowCreatedEventObject {
  escrowId: BigNumber;
  lender: string;
  buyer: string;
  token: string;
  tokenId: BigNumber;
  principal: BigNumber;
  repayment: BigNumber;
  duration: BigNumber;
}
export type PurchaseEscrowCreatedEvent = TypedEvent<
  [
    BigNumber,
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ],
  PurchaseEscrowCreatedEventObject
>;

export type PurchaseEscrowCreatedEventFilter =
  TypedEventFilter<PurchaseEscrowCreatedEvent>;

export interface PurchaseEscrowDelistedEventObject {
  escrowId: BigNumber;
  marketplace: number;
}
export type PurchaseEscrowDelistedEvent = TypedEvent<
  [BigNumber, number],
  PurchaseEscrowDelistedEventObject
>;

export type PurchaseEscrowDelistedEventFilter =
  TypedEventFilter<PurchaseEscrowDelistedEvent>;

export interface PurchaseEscrowLiquidatedEventObject {
  escrowId: BigNumber;
}
export type PurchaseEscrowLiquidatedEvent = TypedEvent<
  [BigNumber],
  PurchaseEscrowLiquidatedEventObject
>;

export type PurchaseEscrowLiquidatedEventFilter =
  TypedEventFilter<PurchaseEscrowLiquidatedEvent>;

export interface PurchaseEscrowListedEventObject {
  escrowId: BigNumber;
  marketplace: number;
  listingData: string;
}
export type PurchaseEscrowListedEvent = TypedEvent<
  [BigNumber, number, string],
  PurchaseEscrowListedEventObject
>;

export type PurchaseEscrowListedEventFilter =
  TypedEventFilter<PurchaseEscrowListedEvent>;

export interface PurchaseEscrowRepaidEventObject {
  escrowId: BigNumber;
}
export type PurchaseEscrowRepaidEvent = TypedEvent<
  [BigNumber],
  PurchaseEscrowRepaidEventObject
>;

export type PurchaseEscrowRepaidEventFilter =
  TypedEventFilter<PurchaseEscrowRepaidEvent>;

export interface PurchaseEscrowSoldEventObject {
  escrowId: BigNumber;
  marketplace: number;
}
export type PurchaseEscrowSoldEvent = TypedEvent<
  [BigNumber, number],
  PurchaseEscrowSoldEventObject
>;

export type PurchaseEscrowSoldEventFilter =
  TypedEventFilter<PurchaseEscrowSoldEvent>;

export interface IPurchaseEscrow extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IPurchaseEscrowInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    cancelListing(
      escrowId: PromiseOrValue<BigNumberish>,
      marketplace: PromiseOrValue<BigNumberish>,
      listingData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    create(
      buyer: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      principal: PromiseOrValue<BigNumberish>,
      repayment: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createListing(
      escrowId: PromiseOrValue<BigNumberish>,
      marketplace: PromiseOrValue<BigNumberish>,
      consideration: PromiseOrValue<BigNumberish>,
      expiration: PromiseOrValue<BigNumberish>,
      salt: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    currencyToken(overrides?: CallOverrides): Promise<[string]>;

    generateListing(
      escrowId: PromiseOrValue<BigNumberish>,
      marketplace: PromiseOrValue<BigNumberish>,
      consideration: PromiseOrValue<BigNumberish>,
      expiration: PromiseOrValue<BigNumberish>,
      salt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    lenderNoteToken(overrides?: CallOverrides): Promise<[string]>;

    liquidate(
      escrowId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    processSale(
      escrowId: PromiseOrValue<BigNumberish>,
      marketplace: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    purchaseEscrows(
      escrowId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[IPurchaseEscrow.PurchaseEscrowTermsStructOutput]>;

    repay(
      escrowId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    repayETH(
      escrowId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  cancelListing(
    escrowId: PromiseOrValue<BigNumberish>,
    marketplace: PromiseOrValue<BigNumberish>,
    listingData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  create(
    buyer: PromiseOrValue<string>,
    token: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    principal: PromiseOrValue<BigNumberish>,
    repayment: PromiseOrValue<BigNumberish>,
    duration: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createListing(
    escrowId: PromiseOrValue<BigNumberish>,
    marketplace: PromiseOrValue<BigNumberish>,
    consideration: PromiseOrValue<BigNumberish>,
    expiration: PromiseOrValue<BigNumberish>,
    salt: PromiseOrValue<BigNumberish>,
    signature: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  currencyToken(overrides?: CallOverrides): Promise<string>;

  generateListing(
    escrowId: PromiseOrValue<BigNumberish>,
    marketplace: PromiseOrValue<BigNumberish>,
    consideration: PromiseOrValue<BigNumberish>,
    expiration: PromiseOrValue<BigNumberish>,
    salt: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  lenderNoteToken(overrides?: CallOverrides): Promise<string>;

  liquidate(
    escrowId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  processSale(
    escrowId: PromiseOrValue<BigNumberish>,
    marketplace: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  purchaseEscrows(
    escrowId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IPurchaseEscrow.PurchaseEscrowTermsStructOutput>;

  repay(
    escrowId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  repayETH(
    escrowId: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    cancelListing(
      escrowId: PromiseOrValue<BigNumberish>,
      marketplace: PromiseOrValue<BigNumberish>,
      listingData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    create(
      buyer: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      principal: PromiseOrValue<BigNumberish>,
      repayment: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createListing(
      escrowId: PromiseOrValue<BigNumberish>,
      marketplace: PromiseOrValue<BigNumberish>,
      consideration: PromiseOrValue<BigNumberish>,
      expiration: PromiseOrValue<BigNumberish>,
      salt: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    currencyToken(overrides?: CallOverrides): Promise<string>;

    generateListing(
      escrowId: PromiseOrValue<BigNumberish>,
      marketplace: PromiseOrValue<BigNumberish>,
      consideration: PromiseOrValue<BigNumberish>,
      expiration: PromiseOrValue<BigNumberish>,
      salt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    lenderNoteToken(overrides?: CallOverrides): Promise<string>;

    liquidate(
      escrowId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    processSale(
      escrowId: PromiseOrValue<BigNumberish>,
      marketplace: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    purchaseEscrows(
      escrowId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IPurchaseEscrow.PurchaseEscrowTermsStructOutput>;

    repay(
      escrowId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    repayETH(
      escrowId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "PurchaseEscrowCreated(uint256,address,address,address,uint256,uint256,uint256,uint64)"(
      escrowId?: PromiseOrValue<BigNumberish> | null,
      lender?: null,
      buyer?: null,
      token?: null,
      tokenId?: null,
      principal?: null,
      repayment?: null,
      duration?: null
    ): PurchaseEscrowCreatedEventFilter;
    PurchaseEscrowCreated(
      escrowId?: PromiseOrValue<BigNumberish> | null,
      lender?: null,
      buyer?: null,
      token?: null,
      tokenId?: null,
      principal?: null,
      repayment?: null,
      duration?: null
    ): PurchaseEscrowCreatedEventFilter;

    "PurchaseEscrowDelisted(uint256,uint8)"(
      escrowId?: PromiseOrValue<BigNumberish> | null,
      marketplace?: null
    ): PurchaseEscrowDelistedEventFilter;
    PurchaseEscrowDelisted(
      escrowId?: PromiseOrValue<BigNumberish> | null,
      marketplace?: null
    ): PurchaseEscrowDelistedEventFilter;

    "PurchaseEscrowLiquidated(uint256)"(
      escrowId?: PromiseOrValue<BigNumberish> | null
    ): PurchaseEscrowLiquidatedEventFilter;
    PurchaseEscrowLiquidated(
      escrowId?: PromiseOrValue<BigNumberish> | null
    ): PurchaseEscrowLiquidatedEventFilter;

    "PurchaseEscrowListed(uint256,uint8,bytes)"(
      escrowId?: PromiseOrValue<BigNumberish> | null,
      marketplace?: null,
      listingData?: null
    ): PurchaseEscrowListedEventFilter;
    PurchaseEscrowListed(
      escrowId?: PromiseOrValue<BigNumberish> | null,
      marketplace?: null,
      listingData?: null
    ): PurchaseEscrowListedEventFilter;

    "PurchaseEscrowRepaid(uint256)"(
      escrowId?: PromiseOrValue<BigNumberish> | null
    ): PurchaseEscrowRepaidEventFilter;
    PurchaseEscrowRepaid(
      escrowId?: PromiseOrValue<BigNumberish> | null
    ): PurchaseEscrowRepaidEventFilter;

    "PurchaseEscrowSold(uint256,uint8)"(
      escrowId?: PromiseOrValue<BigNumberish> | null,
      marketplace?: null
    ): PurchaseEscrowSoldEventFilter;
    PurchaseEscrowSold(
      escrowId?: PromiseOrValue<BigNumberish> | null,
      marketplace?: null
    ): PurchaseEscrowSoldEventFilter;
  };

  estimateGas: {
    cancelListing(
      escrowId: PromiseOrValue<BigNumberish>,
      marketplace: PromiseOrValue<BigNumberish>,
      listingData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    create(
      buyer: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      principal: PromiseOrValue<BigNumberish>,
      repayment: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createListing(
      escrowId: PromiseOrValue<BigNumberish>,
      marketplace: PromiseOrValue<BigNumberish>,
      consideration: PromiseOrValue<BigNumberish>,
      expiration: PromiseOrValue<BigNumberish>,
      salt: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    currencyToken(overrides?: CallOverrides): Promise<BigNumber>;

    generateListing(
      escrowId: PromiseOrValue<BigNumberish>,
      marketplace: PromiseOrValue<BigNumberish>,
      consideration: PromiseOrValue<BigNumberish>,
      expiration: PromiseOrValue<BigNumberish>,
      salt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lenderNoteToken(overrides?: CallOverrides): Promise<BigNumber>;

    liquidate(
      escrowId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    processSale(
      escrowId: PromiseOrValue<BigNumberish>,
      marketplace: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    purchaseEscrows(
      escrowId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    repay(
      escrowId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    repayETH(
      escrowId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    cancelListing(
      escrowId: PromiseOrValue<BigNumberish>,
      marketplace: PromiseOrValue<BigNumberish>,
      listingData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    create(
      buyer: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      principal: PromiseOrValue<BigNumberish>,
      repayment: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createListing(
      escrowId: PromiseOrValue<BigNumberish>,
      marketplace: PromiseOrValue<BigNumberish>,
      consideration: PromiseOrValue<BigNumberish>,
      expiration: PromiseOrValue<BigNumberish>,
      salt: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    currencyToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    generateListing(
      escrowId: PromiseOrValue<BigNumberish>,
      marketplace: PromiseOrValue<BigNumberish>,
      consideration: PromiseOrValue<BigNumberish>,
      expiration: PromiseOrValue<BigNumberish>,
      salt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lenderNoteToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquidate(
      escrowId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    processSale(
      escrowId: PromiseOrValue<BigNumberish>,
      marketplace: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    purchaseEscrows(
      escrowId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    repay(
      escrowId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    repayETH(
      escrowId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
