/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace IPurchaseEscrow {
  export type PurchaseEscrowTermsStruct = {
    status: PromiseOrValue<BigNumberish>;
    token: PromiseOrValue<string>;
    buyer: PromiseOrValue<string>;
    tokenId: PromiseOrValue<BigNumberish>;
    principal: PromiseOrValue<BigNumberish>;
    repayment: PromiseOrValue<BigNumberish>;
    consideration: PromiseOrValue<BigNumberish>;
    startTime: PromiseOrValue<BigNumberish>;
    duration: PromiseOrValue<BigNumberish>;
    orderHash: PromiseOrValue<BytesLike>;
  };

  export type PurchaseEscrowTermsStructOutput = [
    number,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string
  ] & {
    status: number;
    token: string;
    buyer: string;
    tokenId: BigNumber;
    principal: BigNumber;
    repayment: BigNumber;
    consideration: BigNumber;
    startTime: BigNumber;
    duration: BigNumber;
    orderHash: string;
  };
}

export interface PurchaseEscrowPlatformInterface extends utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "EMERGENCY_ADMIN_ROLE()": FunctionFragment;
    "IMPLEMENTATION_VERSION()": FunctionFragment;
    "cancelAllListings()": FunctionFragment;
    "cancelListing(uint256,uint8,bytes)": FunctionFragment;
    "checkListingStatus(uint256,uint8)": FunctionFragment;
    "checkUpkeep(bytes)": FunctionFragment;
    "create(address,address,uint256,uint256,uint256,uint64)": FunctionFragment;
    "createListing(uint256,uint8,uint256,uint256,address,uint256,uint256,uint256,bytes)": FunctionFragment;
    "currencyToken()": FunctionFragment;
    "generateListing(uint256,uint8,uint256,uint256,address,uint256,uint256,uint256)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "initialize(address,address,address)": FunctionFragment;
    "isValidSignature(bytes32,bytes)": FunctionFragment;
    "lenderNoteToken()": FunctionFragment;
    "liquidate(uint256)": FunctionFragment;
    "marketplaceLister(uint8)": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "performUpkeep(bytes)": FunctionFragment;
    "processSale(uint256,uint8)": FunctionFragment;
    "purchaseEscrows(uint256)": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "repay(uint256)": FunctionFragment;
    "repayETH(uint256)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "setLenderNoteTokenBaseURI(string)": FunctionFragment;
    "setMarketplaceLister(uint8,address)": FunctionFragment;
    "setOrderConstants(bytes)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "transferAndCall(uint256,address,bytes)": FunctionFragment;
    "unpause()": FunctionFragment;
    "withdrawERC20(address,uint256)": FunctionFragment;
    "withdrawETH(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DEFAULT_ADMIN_ROLE"
      | "EMERGENCY_ADMIN_ROLE"
      | "IMPLEMENTATION_VERSION"
      | "cancelAllListings"
      | "cancelListing"
      | "checkListingStatus"
      | "checkUpkeep"
      | "create"
      | "createListing"
      | "currencyToken"
      | "generateListing"
      | "getRoleAdmin"
      | "grantRole"
      | "hasRole"
      | "initialize"
      | "isValidSignature"
      | "lenderNoteToken"
      | "liquidate"
      | "marketplaceLister"
      | "onERC721Received"
      | "pause"
      | "paused"
      | "performUpkeep"
      | "processSale"
      | "purchaseEscrows"
      | "renounceRole"
      | "repay"
      | "repayETH"
      | "revokeRole"
      | "setLenderNoteTokenBaseURI"
      | "setMarketplaceLister"
      | "setOrderConstants"
      | "supportsInterface"
      | "transferAndCall"
      | "unpause"
      | "withdrawERC20"
      | "withdrawETH"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "EMERGENCY_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "IMPLEMENTATION_VERSION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cancelAllListings",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cancelListing",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "checkListingStatus",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "checkUpkeep",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "create",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createListing",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "currencyToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "generateListing",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidSignature",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "lenderNoteToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidate",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "marketplaceLister",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "performUpkeep",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "processSale",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "purchaseEscrows",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "repay",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "repayETH",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setLenderNoteTokenBaseURI",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMarketplaceLister",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setOrderConstants",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferAndCall",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawERC20",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawETH",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "EMERGENCY_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "IMPLEMENTATION_VERSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelAllListings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelListing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkListingStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkUpkeep",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "create", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createListing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currencyToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "generateListing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isValidSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lenderNoteToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "liquidate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "marketplaceLister",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "performUpkeep",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processSale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "purchaseEscrows",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "repay", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "repayETH", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setLenderNoteTokenBaseURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMarketplaceLister",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOrderConstants",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawETH",
    data: BytesLike
  ): Result;

  events: {
    "Initialized(uint8)": EventFragment;
    "Paused(address)": EventFragment;
    "PurchaseEscrowCreated(uint256,address,address,address,uint256,uint256,uint256,uint64)": EventFragment;
    "PurchaseEscrowDelisted(uint256,uint8)": EventFragment;
    "PurchaseEscrowLiquidated(uint256)": EventFragment;
    "PurchaseEscrowListed(uint256,uint8,bytes)": EventFragment;
    "PurchaseEscrowRepaid(uint256)": EventFragment;
    "PurchaseEscrowSold(uint256,uint8)": EventFragment;
    "PurchaseEscrowTransferred(uint256,address,address)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PurchaseEscrowCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PurchaseEscrowDelisted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PurchaseEscrowLiquidated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PurchaseEscrowListed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PurchaseEscrowRepaid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PurchaseEscrowSold"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PurchaseEscrowTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface PurchaseEscrowCreatedEventObject {
  escrowId: BigNumber;
  lender: string;
  buyer: string;
  token: string;
  tokenId: BigNumber;
  principal: BigNumber;
  repayment: BigNumber;
  duration: BigNumber;
}
export type PurchaseEscrowCreatedEvent = TypedEvent<
  [
    BigNumber,
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ],
  PurchaseEscrowCreatedEventObject
>;

export type PurchaseEscrowCreatedEventFilter =
  TypedEventFilter<PurchaseEscrowCreatedEvent>;

export interface PurchaseEscrowDelistedEventObject {
  escrowId: BigNumber;
  marketplace: number;
}
export type PurchaseEscrowDelistedEvent = TypedEvent<
  [BigNumber, number],
  PurchaseEscrowDelistedEventObject
>;

export type PurchaseEscrowDelistedEventFilter =
  TypedEventFilter<PurchaseEscrowDelistedEvent>;

export interface PurchaseEscrowLiquidatedEventObject {
  escrowId: BigNumber;
}
export type PurchaseEscrowLiquidatedEvent = TypedEvent<
  [BigNumber],
  PurchaseEscrowLiquidatedEventObject
>;

export type PurchaseEscrowLiquidatedEventFilter =
  TypedEventFilter<PurchaseEscrowLiquidatedEvent>;

export interface PurchaseEscrowListedEventObject {
  escrowId: BigNumber;
  marketplace: number;
  listingData: string;
}
export type PurchaseEscrowListedEvent = TypedEvent<
  [BigNumber, number, string],
  PurchaseEscrowListedEventObject
>;

export type PurchaseEscrowListedEventFilter =
  TypedEventFilter<PurchaseEscrowListedEvent>;

export interface PurchaseEscrowRepaidEventObject {
  escrowId: BigNumber;
}
export type PurchaseEscrowRepaidEvent = TypedEvent<
  [BigNumber],
  PurchaseEscrowRepaidEventObject
>;

export type PurchaseEscrowRepaidEventFilter =
  TypedEventFilter<PurchaseEscrowRepaidEvent>;

export interface PurchaseEscrowSoldEventObject {
  escrowId: BigNumber;
  marketplace: number;
}
export type PurchaseEscrowSoldEvent = TypedEvent<
  [BigNumber, number],
  PurchaseEscrowSoldEventObject
>;

export type PurchaseEscrowSoldEventFilter =
  TypedEventFilter<PurchaseEscrowSoldEvent>;

export interface PurchaseEscrowTransferredEventObject {
  escrowId: BigNumber;
  from: string;
  to: string;
}
export type PurchaseEscrowTransferredEvent = TypedEvent<
  [BigNumber, string, string],
  PurchaseEscrowTransferredEventObject
>;

export type PurchaseEscrowTransferredEventFilter =
  TypedEventFilter<PurchaseEscrowTransferredEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface PurchaseEscrowPlatform extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PurchaseEscrowPlatformInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    EMERGENCY_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    IMPLEMENTATION_VERSION(overrides?: CallOverrides): Promise<[string]>;

    cancelAllListings(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cancelListing(
      escrowId: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      listingData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    checkListingStatus(
      escrowId: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { filled: boolean }>;

    checkUpkeep(
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean, string]>;

    create(
      buyer: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      principal: PromiseOrValue<BigNumberish>,
      repayment: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createListing(
      escrowId: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      listingPrice: PromiseOrValue<BigNumberish>,
      royaltyBasisPoints: PromiseOrValue<BigNumberish>,
      royaltyRecipient: PromiseOrValue<string>,
      startTime: PromiseOrValue<BigNumberish>,
      expiration: PromiseOrValue<BigNumberish>,
      salt: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    currencyToken(overrides?: CallOverrides): Promise<[string]>;

    generateListing(
      escrowId: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      listingPrice: PromiseOrValue<BigNumberish>,
      royaltyBasisPoints: PromiseOrValue<BigNumberish>,
      royaltyRecipient: PromiseOrValue<string>,
      startTime: PromiseOrValue<BigNumberish>,
      expiration: PromiseOrValue<BigNumberish>,
      salt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initialize(
      currencyToken_: PromiseOrValue<string>,
      lenderNoteToken_: PromiseOrValue<string>,
      seaportLister_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isValidSignature(
      digest: PromiseOrValue<BytesLike>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    lenderNoteToken(overrides?: CallOverrides): Promise<[string]>;

    liquidate(
      escrowId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    marketplaceLister(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    performUpkeep(
      performData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    processSale(
      escrowId: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    purchaseEscrows(
      escrowId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[IPurchaseEscrow.PurchaseEscrowTermsStructOutput]>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    repay(
      escrowId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    repayETH(
      escrowId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setLenderNoteTokenBaseURI(
      baseURI: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMarketplaceLister(
      arg0: PromiseOrValue<BigNumberish>,
      lister: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setOrderConstants(
      orderConstants: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    transferAndCall(
      escrowId: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawERC20(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawETH(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  EMERGENCY_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  IMPLEMENTATION_VERSION(overrides?: CallOverrides): Promise<string>;

  cancelAllListings(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cancelListing(
    escrowId: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BigNumberish>,
    listingData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  checkListingStatus(
    escrowId: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  checkUpkeep(
    data: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<[boolean, string]>;

  create(
    buyer: PromiseOrValue<string>,
    token: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    principal: PromiseOrValue<BigNumberish>,
    repayment: PromiseOrValue<BigNumberish>,
    duration: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createListing(
    escrowId: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BigNumberish>,
    listingPrice: PromiseOrValue<BigNumberish>,
    royaltyBasisPoints: PromiseOrValue<BigNumberish>,
    royaltyRecipient: PromiseOrValue<string>,
    startTime: PromiseOrValue<BigNumberish>,
    expiration: PromiseOrValue<BigNumberish>,
    salt: PromiseOrValue<BigNumberish>,
    signature: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  currencyToken(overrides?: CallOverrides): Promise<string>;

  generateListing(
    escrowId: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BigNumberish>,
    listingPrice: PromiseOrValue<BigNumberish>,
    royaltyBasisPoints: PromiseOrValue<BigNumberish>,
    royaltyRecipient: PromiseOrValue<string>,
    startTime: PromiseOrValue<BigNumberish>,
    expiration: PromiseOrValue<BigNumberish>,
    salt: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleAdmin(
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  grantRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialize(
    currencyToken_: PromiseOrValue<string>,
    lenderNoteToken_: PromiseOrValue<string>,
    seaportLister_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isValidSignature(
    digest: PromiseOrValue<BytesLike>,
    signature: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  lenderNoteToken(overrides?: CallOverrides): Promise<string>;

  liquidate(
    escrowId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  marketplaceLister(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  onERC721Received(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<BigNumberish>,
    arg3: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  pause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  performUpkeep(
    performData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  processSale(
    escrowId: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  purchaseEscrows(
    escrowId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IPurchaseEscrow.PurchaseEscrowTermsStructOutput>;

  renounceRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  repay(
    escrowId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  repayETH(
    escrowId: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setLenderNoteTokenBaseURI(
    baseURI: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMarketplaceLister(
    arg0: PromiseOrValue<BigNumberish>,
    lister: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setOrderConstants(
    orderConstants: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  transferAndCall(
    escrowId: PromiseOrValue<BigNumberish>,
    target: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawERC20(
    token: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawETH(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    EMERGENCY_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    IMPLEMENTATION_VERSION(overrides?: CallOverrides): Promise<string>;

    cancelAllListings(overrides?: CallOverrides): Promise<void>;

    cancelListing(
      escrowId: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      listingData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    checkListingStatus(
      escrowId: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    checkUpkeep(
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean, string]>;

    create(
      buyer: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      principal: PromiseOrValue<BigNumberish>,
      repayment: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createListing(
      escrowId: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      listingPrice: PromiseOrValue<BigNumberish>,
      royaltyBasisPoints: PromiseOrValue<BigNumberish>,
      royaltyRecipient: PromiseOrValue<string>,
      startTime: PromiseOrValue<BigNumberish>,
      expiration: PromiseOrValue<BigNumberish>,
      salt: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    currencyToken(overrides?: CallOverrides): Promise<string>;

    generateListing(
      escrowId: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      listingPrice: PromiseOrValue<BigNumberish>,
      royaltyBasisPoints: PromiseOrValue<BigNumberish>,
      royaltyRecipient: PromiseOrValue<string>,
      startTime: PromiseOrValue<BigNumberish>,
      expiration: PromiseOrValue<BigNumberish>,
      salt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      currencyToken_: PromiseOrValue<string>,
      lenderNoteToken_: PromiseOrValue<string>,
      seaportLister_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    isValidSignature(
      digest: PromiseOrValue<BytesLike>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    lenderNoteToken(overrides?: CallOverrides): Promise<string>;

    liquidate(
      escrowId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    marketplaceLister(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    performUpkeep(
      performData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    processSale(
      escrowId: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    purchaseEscrows(
      escrowId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IPurchaseEscrow.PurchaseEscrowTermsStructOutput>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    repay(
      escrowId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    repayETH(
      escrowId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setLenderNoteTokenBaseURI(
      baseURI: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMarketplaceLister(
      arg0: PromiseOrValue<BigNumberish>,
      lister: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setOrderConstants(
      orderConstants: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferAndCall(
      escrowId: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    withdrawERC20(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawETH(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "PurchaseEscrowCreated(uint256,address,address,address,uint256,uint256,uint256,uint64)"(
      escrowId?: PromiseOrValue<BigNumberish> | null,
      lender?: null,
      buyer?: null,
      token?: null,
      tokenId?: null,
      principal?: null,
      repayment?: null,
      duration?: null
    ): PurchaseEscrowCreatedEventFilter;
    PurchaseEscrowCreated(
      escrowId?: PromiseOrValue<BigNumberish> | null,
      lender?: null,
      buyer?: null,
      token?: null,
      tokenId?: null,
      principal?: null,
      repayment?: null,
      duration?: null
    ): PurchaseEscrowCreatedEventFilter;

    "PurchaseEscrowDelisted(uint256,uint8)"(
      escrowId?: PromiseOrValue<BigNumberish> | null,
      marketplace?: null
    ): PurchaseEscrowDelistedEventFilter;
    PurchaseEscrowDelisted(
      escrowId?: PromiseOrValue<BigNumberish> | null,
      marketplace?: null
    ): PurchaseEscrowDelistedEventFilter;

    "PurchaseEscrowLiquidated(uint256)"(
      escrowId?: PromiseOrValue<BigNumberish> | null
    ): PurchaseEscrowLiquidatedEventFilter;
    PurchaseEscrowLiquidated(
      escrowId?: PromiseOrValue<BigNumberish> | null
    ): PurchaseEscrowLiquidatedEventFilter;

    "PurchaseEscrowListed(uint256,uint8,bytes)"(
      escrowId?: PromiseOrValue<BigNumberish> | null,
      marketplace?: null,
      listingData?: null
    ): PurchaseEscrowListedEventFilter;
    PurchaseEscrowListed(
      escrowId?: PromiseOrValue<BigNumberish> | null,
      marketplace?: null,
      listingData?: null
    ): PurchaseEscrowListedEventFilter;

    "PurchaseEscrowRepaid(uint256)"(
      escrowId?: PromiseOrValue<BigNumberish> | null
    ): PurchaseEscrowRepaidEventFilter;
    PurchaseEscrowRepaid(
      escrowId?: PromiseOrValue<BigNumberish> | null
    ): PurchaseEscrowRepaidEventFilter;

    "PurchaseEscrowSold(uint256,uint8)"(
      escrowId?: PromiseOrValue<BigNumberish> | null,
      marketplace?: null
    ): PurchaseEscrowSoldEventFilter;
    PurchaseEscrowSold(
      escrowId?: PromiseOrValue<BigNumberish> | null,
      marketplace?: null
    ): PurchaseEscrowSoldEventFilter;

    "PurchaseEscrowTransferred(uint256,address,address)"(
      escrowId?: PromiseOrValue<BigNumberish> | null,
      from?: null,
      to?: null
    ): PurchaseEscrowTransferredEventFilter;
    PurchaseEscrowTransferred(
      escrowId?: PromiseOrValue<BigNumberish> | null,
      from?: null,
      to?: null
    ): PurchaseEscrowTransferredEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    EMERGENCY_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    IMPLEMENTATION_VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    cancelAllListings(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cancelListing(
      escrowId: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      listingData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    checkListingStatus(
      escrowId: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkUpkeep(
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    create(
      buyer: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      principal: PromiseOrValue<BigNumberish>,
      repayment: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createListing(
      escrowId: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      listingPrice: PromiseOrValue<BigNumberish>,
      royaltyBasisPoints: PromiseOrValue<BigNumberish>,
      royaltyRecipient: PromiseOrValue<string>,
      startTime: PromiseOrValue<BigNumberish>,
      expiration: PromiseOrValue<BigNumberish>,
      salt: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    currencyToken(overrides?: CallOverrides): Promise<BigNumber>;

    generateListing(
      escrowId: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      listingPrice: PromiseOrValue<BigNumberish>,
      royaltyBasisPoints: PromiseOrValue<BigNumberish>,
      royaltyRecipient: PromiseOrValue<string>,
      startTime: PromiseOrValue<BigNumberish>,
      expiration: PromiseOrValue<BigNumberish>,
      salt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      currencyToken_: PromiseOrValue<string>,
      lenderNoteToken_: PromiseOrValue<string>,
      seaportLister_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isValidSignature(
      digest: PromiseOrValue<BytesLike>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lenderNoteToken(overrides?: CallOverrides): Promise<BigNumber>;

    liquidate(
      escrowId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    marketplaceLister(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    performUpkeep(
      performData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    processSale(
      escrowId: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    purchaseEscrows(
      escrowId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    repay(
      escrowId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    repayETH(
      escrowId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setLenderNoteTokenBaseURI(
      baseURI: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMarketplaceLister(
      arg0: PromiseOrValue<BigNumberish>,
      lister: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setOrderConstants(
      orderConstants: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferAndCall(
      escrowId: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawERC20(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawETH(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    EMERGENCY_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    IMPLEMENTATION_VERSION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cancelAllListings(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cancelListing(
      escrowId: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      listingData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    checkListingStatus(
      escrowId: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkUpkeep(
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    create(
      buyer: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      principal: PromiseOrValue<BigNumberish>,
      repayment: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createListing(
      escrowId: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      listingPrice: PromiseOrValue<BigNumberish>,
      royaltyBasisPoints: PromiseOrValue<BigNumberish>,
      royaltyRecipient: PromiseOrValue<string>,
      startTime: PromiseOrValue<BigNumberish>,
      expiration: PromiseOrValue<BigNumberish>,
      salt: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    currencyToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    generateListing(
      escrowId: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      listingPrice: PromiseOrValue<BigNumberish>,
      royaltyBasisPoints: PromiseOrValue<BigNumberish>,
      royaltyRecipient: PromiseOrValue<string>,
      startTime: PromiseOrValue<BigNumberish>,
      expiration: PromiseOrValue<BigNumberish>,
      salt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      currencyToken_: PromiseOrValue<string>,
      lenderNoteToken_: PromiseOrValue<string>,
      seaportLister_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isValidSignature(
      digest: PromiseOrValue<BytesLike>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lenderNoteToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquidate(
      escrowId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    marketplaceLister(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    performUpkeep(
      performData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    processSale(
      escrowId: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    purchaseEscrows(
      escrowId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    repay(
      escrowId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    repayETH(
      escrowId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setLenderNoteTokenBaseURI(
      baseURI: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMarketplaceLister(
      arg0: PromiseOrValue<BigNumberish>,
      lister: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setOrderConstants(
      orderConstants: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferAndCall(
      escrowId: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawERC20(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawETH(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
