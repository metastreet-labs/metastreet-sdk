/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace VaultStorageV1 {
  export type LoanStruct = {
    status: PromiseOrValue<BigNumberish>;
    maturityTimeBucket: PromiseOrValue<BigNumberish>;
    collateralToken: PromiseOrValue<string>;
    collateralTokenId: PromiseOrValue<BigNumberish>;
    purchasePrice: PromiseOrValue<BigNumberish>;
    repayment: PromiseOrValue<BigNumberish>;
    seniorTrancheReturn: PromiseOrValue<BigNumberish>;
  };

  export type LoanStructOutput = [
    number,
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    status: number;
    maturityTimeBucket: BigNumber;
    collateralToken: string;
    collateralTokenId: BigNumber;
    purchasePrice: BigNumber;
    repayment: BigNumber;
    seniorTrancheReturn: BigNumber;
  };
}

export interface VaultInterface extends utils.Interface {
  functions: {
    "COLLATERAL_LIQUIDATOR_ROLE()": FunctionFragment;
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "EMERGENCY_ADMIN_ROLE()": FunctionFragment;
    "IMPLEMENTATION_VERSION()": FunctionFragment;
    "SHARE_PRICE_PRORATION_BUCKETS()": FunctionFragment;
    "TIME_BUCKET_DURATION()": FunctionFragment;
    "TOTAL_SHARE_PRICE_PRORATION_DURATION()": FunctionFragment;
    "adminFeeRate()": FunctionFragment;
    "balanceState()": FunctionFragment;
    "checkUpkeep(bytes)": FunctionFragment;
    "currencyToken()": FunctionFragment;
    "deposit(uint8,uint256)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "initialize(string,address,address,address,address)": FunctionFragment;
    "loanPriceOracle()": FunctionFragment;
    "loanState(address,uint256)": FunctionFragment;
    "lpToken(uint8)": FunctionFragment;
    "multicall(bytes[])": FunctionFragment;
    "name()": FunctionFragment;
    "noteAdapters(address)": FunctionFragment;
    "onCollateralLiquidated(address,uint256,uint256)": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "onLoanExpired(address,uint256)": FunctionFragment;
    "onLoanRepaid(address,uint256)": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "pendingLoans(uint64,address)": FunctionFragment;
    "performUpkeep(bytes)": FunctionFragment;
    "redeem(uint8,uint256)": FunctionFragment;
    "redemptionSharePrice(uint8)": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "sellNote(address,uint256,uint256)": FunctionFragment;
    "sellNoteAndDeposit(address,uint256,uint256,uint256[2])": FunctionFragment;
    "seniorTrancheRate()": FunctionFragment;
    "setAdminFeeRate(uint256)": FunctionFragment;
    "setLoanPriceOracle(address)": FunctionFragment;
    "setNoteAdapter(address,address)": FunctionFragment;
    "setSeniorTrancheRate(uint256)": FunctionFragment;
    "sharePrice(uint8)": FunctionFragment;
    "supportedNoteTokens()": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "trancheState(uint8)": FunctionFragment;
    "unpause()": FunctionFragment;
    "utilization()": FunctionFragment;
    "withdraw(uint8,uint256)": FunctionFragment;
    "withdrawAdminFees(address,uint256)": FunctionFragment;
    "withdrawCollateral(address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "COLLATERAL_LIQUIDATOR_ROLE"
      | "DEFAULT_ADMIN_ROLE"
      | "EMERGENCY_ADMIN_ROLE"
      | "IMPLEMENTATION_VERSION"
      | "SHARE_PRICE_PRORATION_BUCKETS"
      | "TIME_BUCKET_DURATION"
      | "TOTAL_SHARE_PRICE_PRORATION_DURATION"
      | "adminFeeRate"
      | "balanceState"
      | "checkUpkeep"
      | "currencyToken"
      | "deposit"
      | "getRoleAdmin"
      | "grantRole"
      | "hasRole"
      | "initialize"
      | "loanPriceOracle"
      | "loanState"
      | "lpToken"
      | "multicall"
      | "name"
      | "noteAdapters"
      | "onCollateralLiquidated"
      | "onERC721Received"
      | "onLoanExpired"
      | "onLoanRepaid"
      | "pause"
      | "paused"
      | "pendingLoans"
      | "performUpkeep"
      | "redeem"
      | "redemptionSharePrice"
      | "renounceRole"
      | "revokeRole"
      | "sellNote"
      | "sellNoteAndDeposit"
      | "seniorTrancheRate"
      | "setAdminFeeRate"
      | "setLoanPriceOracle"
      | "setNoteAdapter"
      | "setSeniorTrancheRate"
      | "sharePrice"
      | "supportedNoteTokens"
      | "supportsInterface"
      | "trancheState"
      | "unpause"
      | "utilization"
      | "withdraw"
      | "withdrawAdminFees"
      | "withdrawCollateral"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "COLLATERAL_LIQUIDATOR_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "EMERGENCY_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "IMPLEMENTATION_VERSION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SHARE_PRICE_PRORATION_BUCKETS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TIME_BUCKET_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TOTAL_SHARE_PRICE_PRORATION_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "adminFeeRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "balanceState",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "checkUpkeep",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "currencyToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "loanPriceOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "loanState",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "lpToken",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "multicall",
    values: [PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "noteAdapters",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "onCollateralLiquidated",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "onLoanExpired",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "onLoanRepaid",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingLoans",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "performUpkeep",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "redeem",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "redemptionSharePrice",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "sellNote",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "sellNoteAndDeposit",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "seniorTrancheRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAdminFeeRate",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setLoanPriceOracle",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setNoteAdapter",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setSeniorTrancheRate",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "sharePrice",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportedNoteTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "trancheState",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "utilization",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAdminFees",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawCollateral",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "COLLATERAL_LIQUIDATOR_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "EMERGENCY_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "IMPLEMENTATION_VERSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SHARE_PRICE_PRORATION_BUCKETS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TIME_BUCKET_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TOTAL_SHARE_PRICE_PRORATION_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adminFeeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkUpkeep",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currencyToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "loanPriceOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "loanState", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lpToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "noteAdapters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onCollateralLiquidated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onLoanExpired",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onLoanRepaid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingLoans",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "performUpkeep",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "redemptionSharePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sellNote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sellNoteAndDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "seniorTrancheRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAdminFeeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLoanPriceOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNoteAdapter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSeniorTrancheRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sharePrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportedNoteTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "trancheState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "utilization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAdminFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawCollateral",
    data: BytesLike
  ): Result;

  events: {
    "AdminFeeRateUpdated(uint256)": EventFragment;
    "AdminFeesWithdrawn(address,uint256)": EventFragment;
    "CollateralLiquidated(address,uint256,uint256[2])": EventFragment;
    "CollateralWithdrawn(address,uint256,address,uint256,address)": EventFragment;
    "Deposited(address,uint8,uint256,uint256)": EventFragment;
    "LoanLiquidated(address,uint256,uint256[2])": EventFragment;
    "LoanPriceOracleUpdated(address)": EventFragment;
    "LoanRepaid(address,uint256,uint256,uint256[2])": EventFragment;
    "NoteAdapterUpdated(address,address)": EventFragment;
    "NotePurchased(address,address,uint256,uint256,uint256,uint256[2])": EventFragment;
    "Paused(address)": EventFragment;
    "Redeemed(address,uint8,uint256,uint256)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "SeniorTrancheRateUpdated(uint256)": EventFragment;
    "Unpaused(address)": EventFragment;
    "Withdrawn(address,uint8,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminFeeRateUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AdminFeesWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CollateralLiquidated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CollateralWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LoanLiquidated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LoanPriceOracleUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LoanRepaid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NoteAdapterUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NotePurchased"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Redeemed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SeniorTrancheRateUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrawn"): EventFragment;
}

export interface AdminFeeRateUpdatedEventObject {
  rate: BigNumber;
}
export type AdminFeeRateUpdatedEvent = TypedEvent<
  [BigNumber],
  AdminFeeRateUpdatedEventObject
>;

export type AdminFeeRateUpdatedEventFilter =
  TypedEventFilter<AdminFeeRateUpdatedEvent>;

export interface AdminFeesWithdrawnEventObject {
  account: string;
  amount: BigNumber;
}
export type AdminFeesWithdrawnEvent = TypedEvent<
  [string, BigNumber],
  AdminFeesWithdrawnEventObject
>;

export type AdminFeesWithdrawnEventFilter =
  TypedEventFilter<AdminFeesWithdrawnEvent>;

export interface CollateralLiquidatedEventObject {
  noteToken: string;
  loanId: BigNumber;
  trancheReturns: [BigNumber, BigNumber];
}
export type CollateralLiquidatedEvent = TypedEvent<
  [string, BigNumber, [BigNumber, BigNumber]],
  CollateralLiquidatedEventObject
>;

export type CollateralLiquidatedEventFilter =
  TypedEventFilter<CollateralLiquidatedEvent>;

export interface CollateralWithdrawnEventObject {
  noteToken: string;
  loanId: BigNumber;
  collateralToken: string;
  collateralTokenId: BigNumber;
  collateralLiquidator: string;
}
export type CollateralWithdrawnEvent = TypedEvent<
  [string, BigNumber, string, BigNumber, string],
  CollateralWithdrawnEventObject
>;

export type CollateralWithdrawnEventFilter =
  TypedEventFilter<CollateralWithdrawnEvent>;

export interface DepositedEventObject {
  account: string;
  trancheId: number;
  amount: BigNumber;
  shares: BigNumber;
}
export type DepositedEvent = TypedEvent<
  [string, number, BigNumber, BigNumber],
  DepositedEventObject
>;

export type DepositedEventFilter = TypedEventFilter<DepositedEvent>;

export interface LoanLiquidatedEventObject {
  noteToken: string;
  loanId: BigNumber;
  trancheLosses: [BigNumber, BigNumber];
}
export type LoanLiquidatedEvent = TypedEvent<
  [string, BigNumber, [BigNumber, BigNumber]],
  LoanLiquidatedEventObject
>;

export type LoanLiquidatedEventFilter = TypedEventFilter<LoanLiquidatedEvent>;

export interface LoanPriceOracleUpdatedEventObject {
  loanPriceOracle: string;
}
export type LoanPriceOracleUpdatedEvent = TypedEvent<
  [string],
  LoanPriceOracleUpdatedEventObject
>;

export type LoanPriceOracleUpdatedEventFilter =
  TypedEventFilter<LoanPriceOracleUpdatedEvent>;

export interface LoanRepaidEventObject {
  noteToken: string;
  loanId: BigNumber;
  adminFee: BigNumber;
  trancheReturns: [BigNumber, BigNumber];
}
export type LoanRepaidEvent = TypedEvent<
  [string, BigNumber, BigNumber, [BigNumber, BigNumber]],
  LoanRepaidEventObject
>;

export type LoanRepaidEventFilter = TypedEventFilter<LoanRepaidEvent>;

export interface NoteAdapterUpdatedEventObject {
  noteToken: string;
  noteAdapter: string;
}
export type NoteAdapterUpdatedEvent = TypedEvent<
  [string, string],
  NoteAdapterUpdatedEventObject
>;

export type NoteAdapterUpdatedEventFilter =
  TypedEventFilter<NoteAdapterUpdatedEvent>;

export interface NotePurchasedEventObject {
  account: string;
  noteToken: string;
  noteTokenId: BigNumber;
  loanId: BigNumber;
  purchasePrice: BigNumber;
  trancheContributions: [BigNumber, BigNumber];
}
export type NotePurchasedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber, [BigNumber, BigNumber]],
  NotePurchasedEventObject
>;

export type NotePurchasedEventFilter = TypedEventFilter<NotePurchasedEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface RedeemedEventObject {
  account: string;
  trancheId: number;
  shares: BigNumber;
  amount: BigNumber;
}
export type RedeemedEvent = TypedEvent<
  [string, number, BigNumber, BigNumber],
  RedeemedEventObject
>;

export type RedeemedEventFilter = TypedEventFilter<RedeemedEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface SeniorTrancheRateUpdatedEventObject {
  rate: BigNumber;
}
export type SeniorTrancheRateUpdatedEvent = TypedEvent<
  [BigNumber],
  SeniorTrancheRateUpdatedEventObject
>;

export type SeniorTrancheRateUpdatedEventFilter =
  TypedEventFilter<SeniorTrancheRateUpdatedEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface WithdrawnEventObject {
  account: string;
  trancheId: number;
  amount: BigNumber;
}
export type WithdrawnEvent = TypedEvent<
  [string, number, BigNumber],
  WithdrawnEventObject
>;

export type WithdrawnEventFilter = TypedEventFilter<WithdrawnEvent>;

export interface Vault extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VaultInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    COLLATERAL_LIQUIDATOR_ROLE(overrides?: CallOverrides): Promise<[string]>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    EMERGENCY_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    IMPLEMENTATION_VERSION(overrides?: CallOverrides): Promise<[string]>;

    SHARE_PRICE_PRORATION_BUCKETS(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    TIME_BUCKET_DURATION(overrides?: CallOverrides): Promise<[BigNumber]>;

    TOTAL_SHARE_PRICE_PRORATION_DURATION(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    adminFeeRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    balanceState(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        totalCashBalance: BigNumber;
        totalLoanBalance: BigNumber;
        totalAdminFeeBalance: BigNumber;
        totalWithdrawalBalance: BigNumber;
      }
    >;

    checkUpkeep(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean, string]>;

    currencyToken(overrides?: CallOverrides): Promise<[string]>;

    deposit(
      trancheId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initialize(
      name_: PromiseOrValue<string>,
      currencyToken_: PromiseOrValue<string>,
      loanPriceOracle_: PromiseOrValue<string>,
      seniorLPToken_: PromiseOrValue<string>,
      juniorLPToken_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    loanPriceOracle(overrides?: CallOverrides): Promise<[string]>;

    loanState(
      noteToken: PromiseOrValue<string>,
      loanId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[VaultStorageV1.LoanStructOutput]>;

    lpToken(
      trancheId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    multicall(
      data: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    noteAdapters(
      noteToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    onCollateralLiquidated(
      noteToken: PromiseOrValue<string>,
      loanId: PromiseOrValue<BigNumberish>,
      proceeds: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    onLoanExpired(
      noteToken: PromiseOrValue<string>,
      loanId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    onLoanRepaid(
      noteToken: PromiseOrValue<string>,
      loanId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    pendingLoans(
      timeBucket: PromiseOrValue<BigNumberish>,
      noteToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    performUpkeep(
      performData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    redeem(
      trancheId: PromiseOrValue<BigNumberish>,
      shares: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    redemptionSharePrice(
      trancheId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sellNote(
      noteToken: PromiseOrValue<string>,
      noteTokenId: PromiseOrValue<BigNumberish>,
      minPurchasePrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sellNoteAndDeposit(
      noteToken: PromiseOrValue<string>,
      noteTokenId: PromiseOrValue<BigNumberish>,
      minPurchasePrice: PromiseOrValue<BigNumberish>,
      allocation: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    seniorTrancheRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    setAdminFeeRate(
      rate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setLoanPriceOracle(
      loanPriceOracle_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setNoteAdapter(
      noteToken: PromiseOrValue<string>,
      noteAdapter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setSeniorTrancheRate(
      rate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sharePrice(
      trancheId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    supportedNoteTokens(overrides?: CallOverrides): Promise<[string[]]>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    trancheState(
      trancheId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        realizedValue: BigNumber;
        estimatedValue: BigNumber;
        pendingRedemptions: BigNumber;
        redemptionQueue: BigNumber;
        processedRedemptionQueue: BigNumber;
        depositSharePrice: BigNumber;
        redemptionSharePrice_: BigNumber;
      }
    >;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    utilization(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdraw(
      trancheId: PromiseOrValue<BigNumberish>,
      maxAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawAdminFees(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawCollateral(
      noteToken: PromiseOrValue<string>,
      loanId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  COLLATERAL_LIQUIDATOR_ROLE(overrides?: CallOverrides): Promise<string>;

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  EMERGENCY_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  IMPLEMENTATION_VERSION(overrides?: CallOverrides): Promise<string>;

  SHARE_PRICE_PRORATION_BUCKETS(overrides?: CallOverrides): Promise<BigNumber>;

  TIME_BUCKET_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

  TOTAL_SHARE_PRICE_PRORATION_DURATION(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  adminFeeRate(overrides?: CallOverrides): Promise<BigNumber>;

  balanceState(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      totalCashBalance: BigNumber;
      totalLoanBalance: BigNumber;
      totalAdminFeeBalance: BigNumber;
      totalWithdrawalBalance: BigNumber;
    }
  >;

  checkUpkeep(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<[boolean, string]>;

  currencyToken(overrides?: CallOverrides): Promise<string>;

  deposit(
    trancheId: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getRoleAdmin(
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  grantRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialize(
    name_: PromiseOrValue<string>,
    currencyToken_: PromiseOrValue<string>,
    loanPriceOracle_: PromiseOrValue<string>,
    seniorLPToken_: PromiseOrValue<string>,
    juniorLPToken_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  loanPriceOracle(overrides?: CallOverrides): Promise<string>;

  loanState(
    noteToken: PromiseOrValue<string>,
    loanId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<VaultStorageV1.LoanStructOutput>;

  lpToken(
    trancheId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  multicall(
    data: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  noteAdapters(
    noteToken: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  onCollateralLiquidated(
    noteToken: PromiseOrValue<string>,
    loanId: PromiseOrValue<BigNumberish>,
    proceeds: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  onERC721Received(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<BigNumberish>,
    arg3: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  onLoanExpired(
    noteToken: PromiseOrValue<string>,
    loanId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  onLoanRepaid(
    noteToken: PromiseOrValue<string>,
    loanId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  pause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  pendingLoans(
    timeBucket: PromiseOrValue<BigNumberish>,
    noteToken: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  performUpkeep(
    performData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  redeem(
    trancheId: PromiseOrValue<BigNumberish>,
    shares: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  redemptionSharePrice(
    trancheId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  renounceRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sellNote(
    noteToken: PromiseOrValue<string>,
    noteTokenId: PromiseOrValue<BigNumberish>,
    minPurchasePrice: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sellNoteAndDeposit(
    noteToken: PromiseOrValue<string>,
    noteTokenId: PromiseOrValue<BigNumberish>,
    minPurchasePrice: PromiseOrValue<BigNumberish>,
    allocation: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  seniorTrancheRate(overrides?: CallOverrides): Promise<BigNumber>;

  setAdminFeeRate(
    rate: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setLoanPriceOracle(
    loanPriceOracle_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setNoteAdapter(
    noteToken: PromiseOrValue<string>,
    noteAdapter: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setSeniorTrancheRate(
    rate: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sharePrice(
    trancheId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  supportedNoteTokens(overrides?: CallOverrides): Promise<string[]>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  trancheState(
    trancheId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      realizedValue: BigNumber;
      estimatedValue: BigNumber;
      pendingRedemptions: BigNumber;
      redemptionQueue: BigNumber;
      processedRedemptionQueue: BigNumber;
      depositSharePrice: BigNumber;
      redemptionSharePrice_: BigNumber;
    }
  >;

  unpause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  utilization(overrides?: CallOverrides): Promise<BigNumber>;

  withdraw(
    trancheId: PromiseOrValue<BigNumberish>,
    maxAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawAdminFees(
    recipient: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawCollateral(
    noteToken: PromiseOrValue<string>,
    loanId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    COLLATERAL_LIQUIDATOR_ROLE(overrides?: CallOverrides): Promise<string>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    EMERGENCY_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    IMPLEMENTATION_VERSION(overrides?: CallOverrides): Promise<string>;

    SHARE_PRICE_PRORATION_BUCKETS(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    TIME_BUCKET_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    TOTAL_SHARE_PRICE_PRORATION_DURATION(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    adminFeeRate(overrides?: CallOverrides): Promise<BigNumber>;

    balanceState(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        totalCashBalance: BigNumber;
        totalLoanBalance: BigNumber;
        totalAdminFeeBalance: BigNumber;
        totalWithdrawalBalance: BigNumber;
      }
    >;

    checkUpkeep(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean, string]>;

    currencyToken(overrides?: CallOverrides): Promise<string>;

    deposit(
      trancheId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      name_: PromiseOrValue<string>,
      currencyToken_: PromiseOrValue<string>,
      loanPriceOracle_: PromiseOrValue<string>,
      seniorLPToken_: PromiseOrValue<string>,
      juniorLPToken_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    loanPriceOracle(overrides?: CallOverrides): Promise<string>;

    loanState(
      noteToken: PromiseOrValue<string>,
      loanId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<VaultStorageV1.LoanStructOutput>;

    lpToken(
      trancheId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    multicall(
      data: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<string[]>;

    name(overrides?: CallOverrides): Promise<string>;

    noteAdapters(
      noteToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    onCollateralLiquidated(
      noteToken: PromiseOrValue<string>,
      loanId: PromiseOrValue<BigNumberish>,
      proceeds: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    onLoanExpired(
      noteToken: PromiseOrValue<string>,
      loanId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    onLoanRepaid(
      noteToken: PromiseOrValue<string>,
      loanId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    pendingLoans(
      timeBucket: PromiseOrValue<BigNumberish>,
      noteToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    performUpkeep(
      performData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    redeem(
      trancheId: PromiseOrValue<BigNumberish>,
      shares: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    redemptionSharePrice(
      trancheId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    sellNote(
      noteToken: PromiseOrValue<string>,
      noteTokenId: PromiseOrValue<BigNumberish>,
      minPurchasePrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    sellNoteAndDeposit(
      noteToken: PromiseOrValue<string>,
      noteTokenId: PromiseOrValue<BigNumberish>,
      minPurchasePrice: PromiseOrValue<BigNumberish>,
      allocation: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      overrides?: CallOverrides
    ): Promise<void>;

    seniorTrancheRate(overrides?: CallOverrides): Promise<BigNumber>;

    setAdminFeeRate(
      rate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setLoanPriceOracle(
      loanPriceOracle_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setNoteAdapter(
      noteToken: PromiseOrValue<string>,
      noteAdapter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setSeniorTrancheRate(
      rate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    sharePrice(
      trancheId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    supportedNoteTokens(overrides?: CallOverrides): Promise<string[]>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    trancheState(
      trancheId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        realizedValue: BigNumber;
        estimatedValue: BigNumber;
        pendingRedemptions: BigNumber;
        redemptionQueue: BigNumber;
        processedRedemptionQueue: BigNumber;
        depositSharePrice: BigNumber;
        redemptionSharePrice_: BigNumber;
      }
    >;

    unpause(overrides?: CallOverrides): Promise<void>;

    utilization(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      trancheId: PromiseOrValue<BigNumberish>,
      maxAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawAdminFees(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawCollateral(
      noteToken: PromiseOrValue<string>,
      loanId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AdminFeeRateUpdated(uint256)"(rate?: null): AdminFeeRateUpdatedEventFilter;
    AdminFeeRateUpdated(rate?: null): AdminFeeRateUpdatedEventFilter;

    "AdminFeesWithdrawn(address,uint256)"(
      account?: PromiseOrValue<string> | null,
      amount?: null
    ): AdminFeesWithdrawnEventFilter;
    AdminFeesWithdrawn(
      account?: PromiseOrValue<string> | null,
      amount?: null
    ): AdminFeesWithdrawnEventFilter;

    "CollateralLiquidated(address,uint256,uint256[2])"(
      noteToken?: PromiseOrValue<string> | null,
      loanId?: PromiseOrValue<BigNumberish> | null,
      trancheReturns?: null
    ): CollateralLiquidatedEventFilter;
    CollateralLiquidated(
      noteToken?: PromiseOrValue<string> | null,
      loanId?: PromiseOrValue<BigNumberish> | null,
      trancheReturns?: null
    ): CollateralLiquidatedEventFilter;

    "CollateralWithdrawn(address,uint256,address,uint256,address)"(
      noteToken?: PromiseOrValue<string> | null,
      loanId?: PromiseOrValue<BigNumberish> | null,
      collateralToken?: null,
      collateralTokenId?: null,
      collateralLiquidator?: null
    ): CollateralWithdrawnEventFilter;
    CollateralWithdrawn(
      noteToken?: PromiseOrValue<string> | null,
      loanId?: PromiseOrValue<BigNumberish> | null,
      collateralToken?: null,
      collateralTokenId?: null,
      collateralLiquidator?: null
    ): CollateralWithdrawnEventFilter;

    "Deposited(address,uint8,uint256,uint256)"(
      account?: PromiseOrValue<string> | null,
      trancheId?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
      shares?: null
    ): DepositedEventFilter;
    Deposited(
      account?: PromiseOrValue<string> | null,
      trancheId?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
      shares?: null
    ): DepositedEventFilter;

    "LoanLiquidated(address,uint256,uint256[2])"(
      noteToken?: PromiseOrValue<string> | null,
      loanId?: PromiseOrValue<BigNumberish> | null,
      trancheLosses?: null
    ): LoanLiquidatedEventFilter;
    LoanLiquidated(
      noteToken?: PromiseOrValue<string> | null,
      loanId?: PromiseOrValue<BigNumberish> | null,
      trancheLosses?: null
    ): LoanLiquidatedEventFilter;

    "LoanPriceOracleUpdated(address)"(
      loanPriceOracle?: null
    ): LoanPriceOracleUpdatedEventFilter;
    LoanPriceOracleUpdated(
      loanPriceOracle?: null
    ): LoanPriceOracleUpdatedEventFilter;

    "LoanRepaid(address,uint256,uint256,uint256[2])"(
      noteToken?: PromiseOrValue<string> | null,
      loanId?: PromiseOrValue<BigNumberish> | null,
      adminFee?: null,
      trancheReturns?: null
    ): LoanRepaidEventFilter;
    LoanRepaid(
      noteToken?: PromiseOrValue<string> | null,
      loanId?: PromiseOrValue<BigNumberish> | null,
      adminFee?: null,
      trancheReturns?: null
    ): LoanRepaidEventFilter;

    "NoteAdapterUpdated(address,address)"(
      noteToken?: PromiseOrValue<string> | null,
      noteAdapter?: null
    ): NoteAdapterUpdatedEventFilter;
    NoteAdapterUpdated(
      noteToken?: PromiseOrValue<string> | null,
      noteAdapter?: null
    ): NoteAdapterUpdatedEventFilter;

    "NotePurchased(address,address,uint256,uint256,uint256,uint256[2])"(
      account?: PromiseOrValue<string> | null,
      noteToken?: PromiseOrValue<string> | null,
      noteTokenId?: null,
      loanId?: PromiseOrValue<BigNumberish> | null,
      purchasePrice?: null,
      trancheContributions?: null
    ): NotePurchasedEventFilter;
    NotePurchased(
      account?: PromiseOrValue<string> | null,
      noteToken?: PromiseOrValue<string> | null,
      noteTokenId?: null,
      loanId?: PromiseOrValue<BigNumberish> | null,
      purchasePrice?: null,
      trancheContributions?: null
    ): NotePurchasedEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "Redeemed(address,uint8,uint256,uint256)"(
      account?: PromiseOrValue<string> | null,
      trancheId?: PromiseOrValue<BigNumberish> | null,
      shares?: null,
      amount?: null
    ): RedeemedEventFilter;
    Redeemed(
      account?: PromiseOrValue<string> | null,
      trancheId?: PromiseOrValue<BigNumberish> | null,
      shares?: null,
      amount?: null
    ): RedeemedEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;

    "SeniorTrancheRateUpdated(uint256)"(
      rate?: null
    ): SeniorTrancheRateUpdatedEventFilter;
    SeniorTrancheRateUpdated(rate?: null): SeniorTrancheRateUpdatedEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;

    "Withdrawn(address,uint8,uint256)"(
      account?: PromiseOrValue<string> | null,
      trancheId?: PromiseOrValue<BigNumberish> | null,
      amount?: null
    ): WithdrawnEventFilter;
    Withdrawn(
      account?: PromiseOrValue<string> | null,
      trancheId?: PromiseOrValue<BigNumberish> | null,
      amount?: null
    ): WithdrawnEventFilter;
  };

  estimateGas: {
    COLLATERAL_LIQUIDATOR_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    EMERGENCY_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    IMPLEMENTATION_VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    SHARE_PRICE_PRORATION_BUCKETS(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    TIME_BUCKET_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    TOTAL_SHARE_PRICE_PRORATION_DURATION(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    adminFeeRate(overrides?: CallOverrides): Promise<BigNumber>;

    balanceState(overrides?: CallOverrides): Promise<BigNumber>;

    checkUpkeep(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currencyToken(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      trancheId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      name_: PromiseOrValue<string>,
      currencyToken_: PromiseOrValue<string>,
      loanPriceOracle_: PromiseOrValue<string>,
      seniorLPToken_: PromiseOrValue<string>,
      juniorLPToken_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    loanPriceOracle(overrides?: CallOverrides): Promise<BigNumber>;

    loanState(
      noteToken: PromiseOrValue<string>,
      loanId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lpToken(
      trancheId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    multicall(
      data: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    noteAdapters(
      noteToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onCollateralLiquidated(
      noteToken: PromiseOrValue<string>,
      loanId: PromiseOrValue<BigNumberish>,
      proceeds: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    onLoanExpired(
      noteToken: PromiseOrValue<string>,
      loanId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    onLoanRepaid(
      noteToken: PromiseOrValue<string>,
      loanId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    pendingLoans(
      timeBucket: PromiseOrValue<BigNumberish>,
      noteToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    performUpkeep(
      performData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    redeem(
      trancheId: PromiseOrValue<BigNumberish>,
      shares: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    redemptionSharePrice(
      trancheId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sellNote(
      noteToken: PromiseOrValue<string>,
      noteTokenId: PromiseOrValue<BigNumberish>,
      minPurchasePrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sellNoteAndDeposit(
      noteToken: PromiseOrValue<string>,
      noteTokenId: PromiseOrValue<BigNumberish>,
      minPurchasePrice: PromiseOrValue<BigNumberish>,
      allocation: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    seniorTrancheRate(overrides?: CallOverrides): Promise<BigNumber>;

    setAdminFeeRate(
      rate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setLoanPriceOracle(
      loanPriceOracle_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setNoteAdapter(
      noteToken: PromiseOrValue<string>,
      noteAdapter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setSeniorTrancheRate(
      rate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sharePrice(
      trancheId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    supportedNoteTokens(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    trancheState(
      trancheId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    utilization(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      trancheId: PromiseOrValue<BigNumberish>,
      maxAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawAdminFees(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawCollateral(
      noteToken: PromiseOrValue<string>,
      loanId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    COLLATERAL_LIQUIDATOR_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    EMERGENCY_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    IMPLEMENTATION_VERSION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    SHARE_PRICE_PRORATION_BUCKETS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    TIME_BUCKET_DURATION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    TOTAL_SHARE_PRICE_PRORATION_DURATION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    adminFeeRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceState(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    checkUpkeep(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currencyToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      trancheId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      name_: PromiseOrValue<string>,
      currencyToken_: PromiseOrValue<string>,
      loanPriceOracle_: PromiseOrValue<string>,
      seniorLPToken_: PromiseOrValue<string>,
      juniorLPToken_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    loanPriceOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    loanState(
      noteToken: PromiseOrValue<string>,
      loanId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lpToken(
      trancheId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    multicall(
      data: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    noteAdapters(
      noteToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onCollateralLiquidated(
      noteToken: PromiseOrValue<string>,
      loanId: PromiseOrValue<BigNumberish>,
      proceeds: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    onLoanExpired(
      noteToken: PromiseOrValue<string>,
      loanId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    onLoanRepaid(
      noteToken: PromiseOrValue<string>,
      loanId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingLoans(
      timeBucket: PromiseOrValue<BigNumberish>,
      noteToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    performUpkeep(
      performData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    redeem(
      trancheId: PromiseOrValue<BigNumberish>,
      shares: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    redemptionSharePrice(
      trancheId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sellNote(
      noteToken: PromiseOrValue<string>,
      noteTokenId: PromiseOrValue<BigNumberish>,
      minPurchasePrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sellNoteAndDeposit(
      noteToken: PromiseOrValue<string>,
      noteTokenId: PromiseOrValue<BigNumberish>,
      minPurchasePrice: PromiseOrValue<BigNumberish>,
      allocation: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    seniorTrancheRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setAdminFeeRate(
      rate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setLoanPriceOracle(
      loanPriceOracle_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setNoteAdapter(
      noteToken: PromiseOrValue<string>,
      noteAdapter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setSeniorTrancheRate(
      rate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sharePrice(
      trancheId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    supportedNoteTokens(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    trancheState(
      trancheId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    utilization(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      trancheId: PromiseOrValue<BigNumberish>,
      maxAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawAdminFees(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawCollateral(
      noteToken: PromiseOrValue<string>,
      loanId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
