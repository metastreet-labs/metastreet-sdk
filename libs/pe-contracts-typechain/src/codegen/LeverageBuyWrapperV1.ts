/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace ILeverageBuy {
  export type CollateralLimitsStruct = {
    minDuration: PromiseOrValue<BigNumberish>;
    maxDuration: PromiseOrValue<BigNumberish>;
    maxLoanToValue: PromiseOrValue<BigNumberish>;
    collateralValue: PromiseOrValue<BigNumberish>;
    maxPrincipal: PromiseOrValue<BigNumberish>;
  };

  export type CollateralLimitsStructOutput = [
    number,
    number,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    minDuration: number;
    maxDuration: number;
    maxLoanToValue: BigNumber;
    collateralValue: BigNumber;
    maxPrincipal: BigNumber;
  };
}

export interface LeverageBuyWrapperV1Interface extends utils.Interface {
  functions: {
    "IMPLEMENTATION_VERSION()": FunctionFragment;
    "buyMultipleERC721WithETH(uint256[],bytes[],address,uint64,uint256[],uint256[])": FunctionFragment;
    "buySingleERC721WithETH(uint256,bytes,address,uint64,uint256)": FunctionFragment;
    "currencyToken()": FunctionFragment;
    "flashLender()": FunctionFragment;
    "getCollateralLimits(address,address,uint256)": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "onEscrowTransfer(address,uint256,bytes)": FunctionFragment;
    "onFlashLoan(address,address,uint256,uint256,bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "purchaseEscrow()": FunctionFragment;
    "quoteMultipleERC721(uint256[],uint256[],address[],uint256[],address,uint64)": FunctionFragment;
    "quoteRefinance(uint256,int256,address,uint256,address,uint64)": FunctionFragment;
    "quoteSingleERC721(uint256,uint256,address,uint256,address,uint64)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "reservoirRouter()": FunctionFragment;
    "setFlashLender(address)": FunctionFragment;
    "setPurchaseEscrow(address)": FunctionFragment;
    "setReservoirRouter(address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "weth()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "IMPLEMENTATION_VERSION"
      | "buyMultipleERC721WithETH"
      | "buySingleERC721WithETH"
      | "currencyToken"
      | "flashLender"
      | "getCollateralLimits"
      | "onERC721Received"
      | "onEscrowTransfer"
      | "onFlashLoan"
      | "owner"
      | "purchaseEscrow"
      | "quoteMultipleERC721"
      | "quoteRefinance"
      | "quoteSingleERC721"
      | "renounceOwnership"
      | "reservoirRouter"
      | "setFlashLender"
      | "setPurchaseEscrow"
      | "setReservoirRouter"
      | "supportsInterface"
      | "transferOwnership"
      | "weth"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "IMPLEMENTATION_VERSION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "buyMultipleERC721WithETH",
    values: [
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "buySingleERC721WithETH",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "currencyToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "flashLender",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCollateralLimits",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "onEscrowTransfer",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "onFlashLoan",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "purchaseEscrow",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "quoteMultipleERC721",
    values: [
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "quoteRefinance",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "quoteSingleERC721",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reservoirRouter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setFlashLender",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPurchaseEscrow",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setReservoirRouter",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "weth", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "IMPLEMENTATION_VERSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyMultipleERC721WithETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buySingleERC721WithETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currencyToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "flashLender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollateralLimits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onEscrowTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onFlashLoan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "purchaseEscrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "quoteMultipleERC721",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "quoteRefinance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "quoteSingleERC721",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reservoirRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFlashLender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPurchaseEscrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReservoirRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "weth", data: BytesLike): Result;

  events: {
    "FlashLenderUpdated(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PurchaseEscrowUpdated(address)": EventFragment;
    "Purchased(address,uint256,uint256,uint256,uint256)": EventFragment;
    "Refinanced(address,int256,uint256,uint256,uint256)": EventFragment;
    "ReservoirRouterUpdated(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "FlashLenderUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PurchaseEscrowUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Purchased"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Refinanced"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReservoirRouterUpdated"): EventFragment;
}

export interface FlashLenderUpdatedEventObject {
  flashLender: string;
}
export type FlashLenderUpdatedEvent = TypedEvent<
  [string],
  FlashLenderUpdatedEventObject
>;

export type FlashLenderUpdatedEventFilter =
  TypedEventFilter<FlashLenderUpdatedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PurchaseEscrowUpdatedEventObject {
  purchaseEscrow: string;
}
export type PurchaseEscrowUpdatedEvent = TypedEvent<
  [string],
  PurchaseEscrowUpdatedEventObject
>;

export type PurchaseEscrowUpdatedEventFilter =
  TypedEventFilter<PurchaseEscrowUpdatedEvent>;

export interface PurchasedEventObject {
  buyer: string;
  purchasePrice: BigNumber;
  downpayment: BigNumber;
  fee: BigNumber;
  escrowId: BigNumber;
}
export type PurchasedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber],
  PurchasedEventObject
>;

export type PurchasedEventFilter = TypedEventFilter<PurchasedEvent>;

export interface RefinancedEventObject {
  buyer: string;
  downpayment: BigNumber;
  fee: BigNumber;
  oldEscrowId: BigNumber;
  newEscrowId: BigNumber;
}
export type RefinancedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber],
  RefinancedEventObject
>;

export type RefinancedEventFilter = TypedEventFilter<RefinancedEvent>;

export interface ReservoirRouterUpdatedEventObject {
  reservoirRouter: string;
}
export type ReservoirRouterUpdatedEvent = TypedEvent<
  [string],
  ReservoirRouterUpdatedEventObject
>;

export type ReservoirRouterUpdatedEventFilter =
  TypedEventFilter<ReservoirRouterUpdatedEvent>;

export interface LeverageBuyWrapperV1 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LeverageBuyWrapperV1Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    IMPLEMENTATION_VERSION(overrides?: CallOverrides): Promise<[string]>;

    buyMultipleERC721WithETH(
      purchasePrices: PromiseOrValue<BigNumberish>[],
      fillCalldatas: PromiseOrValue<BytesLike>[],
      vault: PromiseOrValue<string>,
      duration: PromiseOrValue<BigNumberish>,
      downpayments: PromiseOrValue<BigNumberish>[],
      maxRepayments: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    buySingleERC721WithETH(
      purchasePrice: PromiseOrValue<BigNumberish>,
      fillCalldata: PromiseOrValue<BytesLike>,
      vault: PromiseOrValue<string>,
      duration: PromiseOrValue<BigNumberish>,
      maxRepayment: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    currencyToken(overrides?: CallOverrides): Promise<[string]>;

    flashLender(overrides?: CallOverrides): Promise<[string]>;

    getCollateralLimits(
      vault: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[ILeverageBuy.CollateralLimitsStructOutput]>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    onEscrowTransfer(
      from: PromiseOrValue<string>,
      escrowId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    onFlashLoan(
      initiator: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      fee: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    purchaseEscrow(overrides?: CallOverrides): Promise<[string]>;

    quoteMultipleERC721(
      purchasePrices: PromiseOrValue<BigNumberish>[],
      downpayments: PromiseOrValue<BigNumberish>[],
      tokens: PromiseOrValue<string>[],
      tokenIds: PromiseOrValue<BigNumberish>[],
      vault: PromiseOrValue<string>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber[], BigNumber[]] & {
        fee: BigNumber;
        principals: BigNumber[];
        repayments: BigNumber[];
      }
    >;

    quoteRefinance(
      balance: PromiseOrValue<BigNumberish>,
      downpayment: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      vault: PromiseOrValue<string>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        fee: BigNumber;
        principal: BigNumber;
        repayment: BigNumber;
      }
    >;

    quoteSingleERC721(
      purchasePrice: PromiseOrValue<BigNumberish>,
      downpayment: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      vault: PromiseOrValue<string>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        fee: BigNumber;
        principal: BigNumber;
        repayment: BigNumber;
      }
    >;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    reservoirRouter(overrides?: CallOverrides): Promise<[string]>;

    setFlashLender(
      flashLender_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPurchaseEscrow(
      purchaseEscrow_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setReservoirRouter(
      reservoirRouter_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    weth(overrides?: CallOverrides): Promise<[string]>;
  };

  IMPLEMENTATION_VERSION(overrides?: CallOverrides): Promise<string>;

  buyMultipleERC721WithETH(
    purchasePrices: PromiseOrValue<BigNumberish>[],
    fillCalldatas: PromiseOrValue<BytesLike>[],
    vault: PromiseOrValue<string>,
    duration: PromiseOrValue<BigNumberish>,
    downpayments: PromiseOrValue<BigNumberish>[],
    maxRepayments: PromiseOrValue<BigNumberish>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  buySingleERC721WithETH(
    purchasePrice: PromiseOrValue<BigNumberish>,
    fillCalldata: PromiseOrValue<BytesLike>,
    vault: PromiseOrValue<string>,
    duration: PromiseOrValue<BigNumberish>,
    maxRepayment: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  currencyToken(overrides?: CallOverrides): Promise<string>;

  flashLender(overrides?: CallOverrides): Promise<string>;

  getCollateralLimits(
    vault: PromiseOrValue<string>,
    token: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<ILeverageBuy.CollateralLimitsStructOutput>;

  onERC721Received(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<BigNumberish>,
    arg3: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  onEscrowTransfer(
    from: PromiseOrValue<string>,
    escrowId: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  onFlashLoan(
    initiator: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    fee: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  purchaseEscrow(overrides?: CallOverrides): Promise<string>;

  quoteMultipleERC721(
    purchasePrices: PromiseOrValue<BigNumberish>[],
    downpayments: PromiseOrValue<BigNumberish>[],
    tokens: PromiseOrValue<string>[],
    tokenIds: PromiseOrValue<BigNumberish>[],
    vault: PromiseOrValue<string>,
    duration: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber[], BigNumber[]] & {
      fee: BigNumber;
      principals: BigNumber[];
      repayments: BigNumber[];
    }
  >;

  quoteRefinance(
    balance: PromiseOrValue<BigNumberish>,
    downpayment: PromiseOrValue<BigNumberish>,
    token: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    vault: PromiseOrValue<string>,
    duration: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      fee: BigNumber;
      principal: BigNumber;
      repayment: BigNumber;
    }
  >;

  quoteSingleERC721(
    purchasePrice: PromiseOrValue<BigNumberish>,
    downpayment: PromiseOrValue<BigNumberish>,
    token: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    vault: PromiseOrValue<string>,
    duration: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      fee: BigNumber;
      principal: BigNumber;
      repayment: BigNumber;
    }
  >;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  reservoirRouter(overrides?: CallOverrides): Promise<string>;

  setFlashLender(
    flashLender_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPurchaseEscrow(
    purchaseEscrow_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setReservoirRouter(
    reservoirRouter_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  weth(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    IMPLEMENTATION_VERSION(overrides?: CallOverrides): Promise<string>;

    buyMultipleERC721WithETH(
      purchasePrices: PromiseOrValue<BigNumberish>[],
      fillCalldatas: PromiseOrValue<BytesLike>[],
      vault: PromiseOrValue<string>,
      duration: PromiseOrValue<BigNumberish>,
      downpayments: PromiseOrValue<BigNumberish>[],
      maxRepayments: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    buySingleERC721WithETH(
      purchasePrice: PromiseOrValue<BigNumberish>,
      fillCalldata: PromiseOrValue<BytesLike>,
      vault: PromiseOrValue<string>,
      duration: PromiseOrValue<BigNumberish>,
      maxRepayment: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    currencyToken(overrides?: CallOverrides): Promise<string>;

    flashLender(overrides?: CallOverrides): Promise<string>;

    getCollateralLimits(
      vault: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<ILeverageBuy.CollateralLimitsStructOutput>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    onEscrowTransfer(
      from: PromiseOrValue<string>,
      escrowId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    onFlashLoan(
      initiator: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      fee: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    purchaseEscrow(overrides?: CallOverrides): Promise<string>;

    quoteMultipleERC721(
      purchasePrices: PromiseOrValue<BigNumberish>[],
      downpayments: PromiseOrValue<BigNumberish>[],
      tokens: PromiseOrValue<string>[],
      tokenIds: PromiseOrValue<BigNumberish>[],
      vault: PromiseOrValue<string>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber[], BigNumber[]] & {
        fee: BigNumber;
        principals: BigNumber[];
        repayments: BigNumber[];
      }
    >;

    quoteRefinance(
      balance: PromiseOrValue<BigNumberish>,
      downpayment: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      vault: PromiseOrValue<string>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        fee: BigNumber;
        principal: BigNumber;
        repayment: BigNumber;
      }
    >;

    quoteSingleERC721(
      purchasePrice: PromiseOrValue<BigNumberish>,
      downpayment: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      vault: PromiseOrValue<string>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        fee: BigNumber;
        principal: BigNumber;
        repayment: BigNumber;
      }
    >;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    reservoirRouter(overrides?: CallOverrides): Promise<string>;

    setFlashLender(
      flashLender_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPurchaseEscrow(
      purchaseEscrow_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setReservoirRouter(
      reservoirRouter_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    weth(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "FlashLenderUpdated(address)"(
      flashLender?: null
    ): FlashLenderUpdatedEventFilter;
    FlashLenderUpdated(flashLender?: null): FlashLenderUpdatedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "PurchaseEscrowUpdated(address)"(
      purchaseEscrow?: null
    ): PurchaseEscrowUpdatedEventFilter;
    PurchaseEscrowUpdated(
      purchaseEscrow?: null
    ): PurchaseEscrowUpdatedEventFilter;

    "Purchased(address,uint256,uint256,uint256,uint256)"(
      buyer?: PromiseOrValue<string> | null,
      purchasePrice?: null,
      downpayment?: null,
      fee?: null,
      escrowId?: PromiseOrValue<BigNumberish> | null
    ): PurchasedEventFilter;
    Purchased(
      buyer?: PromiseOrValue<string> | null,
      purchasePrice?: null,
      downpayment?: null,
      fee?: null,
      escrowId?: PromiseOrValue<BigNumberish> | null
    ): PurchasedEventFilter;

    "Refinanced(address,int256,uint256,uint256,uint256)"(
      buyer?: PromiseOrValue<string> | null,
      downpayment?: null,
      fee?: null,
      oldEscrowId?: PromiseOrValue<BigNumberish> | null,
      newEscrowId?: PromiseOrValue<BigNumberish> | null
    ): RefinancedEventFilter;
    Refinanced(
      buyer?: PromiseOrValue<string> | null,
      downpayment?: null,
      fee?: null,
      oldEscrowId?: PromiseOrValue<BigNumberish> | null,
      newEscrowId?: PromiseOrValue<BigNumberish> | null
    ): RefinancedEventFilter;

    "ReservoirRouterUpdated(address)"(
      reservoirRouter?: null
    ): ReservoirRouterUpdatedEventFilter;
    ReservoirRouterUpdated(
      reservoirRouter?: null
    ): ReservoirRouterUpdatedEventFilter;
  };

  estimateGas: {
    IMPLEMENTATION_VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    buyMultipleERC721WithETH(
      purchasePrices: PromiseOrValue<BigNumberish>[],
      fillCalldatas: PromiseOrValue<BytesLike>[],
      vault: PromiseOrValue<string>,
      duration: PromiseOrValue<BigNumberish>,
      downpayments: PromiseOrValue<BigNumberish>[],
      maxRepayments: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    buySingleERC721WithETH(
      purchasePrice: PromiseOrValue<BigNumberish>,
      fillCalldata: PromiseOrValue<BytesLike>,
      vault: PromiseOrValue<string>,
      duration: PromiseOrValue<BigNumberish>,
      maxRepayment: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    currencyToken(overrides?: CallOverrides): Promise<BigNumber>;

    flashLender(overrides?: CallOverrides): Promise<BigNumber>;

    getCollateralLimits(
      vault: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    onEscrowTransfer(
      from: PromiseOrValue<string>,
      escrowId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    onFlashLoan(
      initiator: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      fee: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    purchaseEscrow(overrides?: CallOverrides): Promise<BigNumber>;

    quoteMultipleERC721(
      purchasePrices: PromiseOrValue<BigNumberish>[],
      downpayments: PromiseOrValue<BigNumberish>[],
      tokens: PromiseOrValue<string>[],
      tokenIds: PromiseOrValue<BigNumberish>[],
      vault: PromiseOrValue<string>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quoteRefinance(
      balance: PromiseOrValue<BigNumberish>,
      downpayment: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      vault: PromiseOrValue<string>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quoteSingleERC721(
      purchasePrice: PromiseOrValue<BigNumberish>,
      downpayment: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      vault: PromiseOrValue<string>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    reservoirRouter(overrides?: CallOverrides): Promise<BigNumber>;

    setFlashLender(
      flashLender_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPurchaseEscrow(
      purchaseEscrow_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setReservoirRouter(
      reservoirRouter_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    weth(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    IMPLEMENTATION_VERSION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buyMultipleERC721WithETH(
      purchasePrices: PromiseOrValue<BigNumberish>[],
      fillCalldatas: PromiseOrValue<BytesLike>[],
      vault: PromiseOrValue<string>,
      duration: PromiseOrValue<BigNumberish>,
      downpayments: PromiseOrValue<BigNumberish>[],
      maxRepayments: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    buySingleERC721WithETH(
      purchasePrice: PromiseOrValue<BigNumberish>,
      fillCalldata: PromiseOrValue<BytesLike>,
      vault: PromiseOrValue<string>,
      duration: PromiseOrValue<BigNumberish>,
      maxRepayment: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    currencyToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    flashLender(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCollateralLimits(
      vault: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    onEscrowTransfer(
      from: PromiseOrValue<string>,
      escrowId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    onFlashLoan(
      initiator: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      fee: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    purchaseEscrow(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    quoteMultipleERC721(
      purchasePrices: PromiseOrValue<BigNumberish>[],
      downpayments: PromiseOrValue<BigNumberish>[],
      tokens: PromiseOrValue<string>[],
      tokenIds: PromiseOrValue<BigNumberish>[],
      vault: PromiseOrValue<string>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    quoteRefinance(
      balance: PromiseOrValue<BigNumberish>,
      downpayment: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      vault: PromiseOrValue<string>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    quoteSingleERC721(
      purchasePrice: PromiseOrValue<BigNumberish>,
      downpayment: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      vault: PromiseOrValue<string>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    reservoirRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setFlashLender(
      flashLender_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPurchaseEscrow(
      purchaseEscrow_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setReservoirRouter(
      reservoirRouter_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    weth(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
