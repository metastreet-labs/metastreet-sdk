/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace ILeverageBuy {
  export type CollateralLimitsStruct = {
    minDuration: PromiseOrValue<BigNumberish>;
    maxDuration: PromiseOrValue<BigNumberish>;
    maxLoanToValue: PromiseOrValue<BigNumberish>;
    collateralValue: PromiseOrValue<BigNumberish>;
    maxPrincipal: PromiseOrValue<BigNumberish>;
  };

  export type CollateralLimitsStructOutput = [
    number,
    number,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    minDuration: number;
    maxDuration: number;
    maxLoanToValue: BigNumber;
    collateralValue: BigNumber;
    maxPrincipal: BigNumber;
  };
}

export interface ILeverageBuyInterface extends utils.Interface {
  functions: {
    "buySingleERC721WithETH(uint256,bytes,address,uint64,uint256)": FunctionFragment;
    "currencyToken()": FunctionFragment;
    "getCollateralLimits(address,address,uint256)": FunctionFragment;
    "quoteRefinance(uint256,int256,address,uint256,address,uint64)": FunctionFragment;
    "quoteSingleERC721(uint256,uint256,address,uint256,address,uint64)": FunctionFragment;
    "refinanceETH(uint256,address,uint64,int256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "buySingleERC721WithETH"
      | "currencyToken"
      | "getCollateralLimits"
      | "quoteRefinance"
      | "quoteSingleERC721"
      | "refinanceETH"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "buySingleERC721WithETH",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "currencyToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCollateralLimits",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "quoteRefinance",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "quoteSingleERC721",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "refinanceETH",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "buySingleERC721WithETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currencyToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollateralLimits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "quoteRefinance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "quoteSingleERC721",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "refinanceETH",
    data: BytesLike
  ): Result;

  events: {
    "Purchased(address,uint256,uint256,uint256,uint256)": EventFragment;
    "Refinanced(address,int256,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Purchased"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Refinanced"): EventFragment;
}

export interface PurchasedEventObject {
  buyer: string;
  purchasePrice: BigNumber;
  downpayment: BigNumber;
  fee: BigNumber;
  escrowId: BigNumber;
}
export type PurchasedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber],
  PurchasedEventObject
>;

export type PurchasedEventFilter = TypedEventFilter<PurchasedEvent>;

export interface RefinancedEventObject {
  buyer: string;
  downpayment: BigNumber;
  fee: BigNumber;
  oldEscrowId: BigNumber;
  newEscrowId: BigNumber;
}
export type RefinancedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber],
  RefinancedEventObject
>;

export type RefinancedEventFilter = TypedEventFilter<RefinancedEvent>;

export interface ILeverageBuy extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ILeverageBuyInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    buySingleERC721WithETH(
      purchasePrice: PromiseOrValue<BigNumberish>,
      fillCalldata: PromiseOrValue<BytesLike>,
      vault: PromiseOrValue<string>,
      duration: PromiseOrValue<BigNumberish>,
      maxRepayment: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    currencyToken(overrides?: CallOverrides): Promise<[string]>;

    getCollateralLimits(
      vault: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[ILeverageBuy.CollateralLimitsStructOutput]>;

    quoteRefinance(
      balance: PromiseOrValue<BigNumberish>,
      downpayment: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      vault: PromiseOrValue<string>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        fee: BigNumber;
        principal: BigNumber;
        repayment: BigNumber;
      }
    >;

    quoteSingleERC721(
      purchasePrice: PromiseOrValue<BigNumberish>,
      downpayment: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      vault: PromiseOrValue<string>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        fee: BigNumber;
        principal: BigNumber;
        repayment: BigNumber;
      }
    >;

    refinanceETH(
      escrowId: PromiseOrValue<BigNumberish>,
      vault: PromiseOrValue<string>,
      duration: PromiseOrValue<BigNumberish>,
      downpayment: PromiseOrValue<BigNumberish>,
      maxRepayment: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  buySingleERC721WithETH(
    purchasePrice: PromiseOrValue<BigNumberish>,
    fillCalldata: PromiseOrValue<BytesLike>,
    vault: PromiseOrValue<string>,
    duration: PromiseOrValue<BigNumberish>,
    maxRepayment: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  currencyToken(overrides?: CallOverrides): Promise<string>;

  getCollateralLimits(
    vault: PromiseOrValue<string>,
    token: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<ILeverageBuy.CollateralLimitsStructOutput>;

  quoteRefinance(
    balance: PromiseOrValue<BigNumberish>,
    downpayment: PromiseOrValue<BigNumberish>,
    token: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    vault: PromiseOrValue<string>,
    duration: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      fee: BigNumber;
      principal: BigNumber;
      repayment: BigNumber;
    }
  >;

  quoteSingleERC721(
    purchasePrice: PromiseOrValue<BigNumberish>,
    downpayment: PromiseOrValue<BigNumberish>,
    token: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    vault: PromiseOrValue<string>,
    duration: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      fee: BigNumber;
      principal: BigNumber;
      repayment: BigNumber;
    }
  >;

  refinanceETH(
    escrowId: PromiseOrValue<BigNumberish>,
    vault: PromiseOrValue<string>,
    duration: PromiseOrValue<BigNumberish>,
    downpayment: PromiseOrValue<BigNumberish>,
    maxRepayment: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    buySingleERC721WithETH(
      purchasePrice: PromiseOrValue<BigNumberish>,
      fillCalldata: PromiseOrValue<BytesLike>,
      vault: PromiseOrValue<string>,
      duration: PromiseOrValue<BigNumberish>,
      maxRepayment: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    currencyToken(overrides?: CallOverrides): Promise<string>;

    getCollateralLimits(
      vault: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<ILeverageBuy.CollateralLimitsStructOutput>;

    quoteRefinance(
      balance: PromiseOrValue<BigNumberish>,
      downpayment: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      vault: PromiseOrValue<string>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        fee: BigNumber;
        principal: BigNumber;
        repayment: BigNumber;
      }
    >;

    quoteSingleERC721(
      purchasePrice: PromiseOrValue<BigNumberish>,
      downpayment: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      vault: PromiseOrValue<string>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        fee: BigNumber;
        principal: BigNumber;
        repayment: BigNumber;
      }
    >;

    refinanceETH(
      escrowId: PromiseOrValue<BigNumberish>,
      vault: PromiseOrValue<string>,
      duration: PromiseOrValue<BigNumberish>,
      downpayment: PromiseOrValue<BigNumberish>,
      maxRepayment: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Purchased(address,uint256,uint256,uint256,uint256)"(
      buyer?: PromiseOrValue<string> | null,
      purchasePrice?: null,
      downpayment?: null,
      fee?: null,
      escrowId?: PromiseOrValue<BigNumberish> | null
    ): PurchasedEventFilter;
    Purchased(
      buyer?: PromiseOrValue<string> | null,
      purchasePrice?: null,
      downpayment?: null,
      fee?: null,
      escrowId?: PromiseOrValue<BigNumberish> | null
    ): PurchasedEventFilter;

    "Refinanced(address,int256,uint256,uint256,uint256)"(
      buyer?: PromiseOrValue<string> | null,
      downpayment?: null,
      fee?: null,
      oldEscrowId?: PromiseOrValue<BigNumberish> | null,
      newEscrowId?: PromiseOrValue<BigNumberish> | null
    ): RefinancedEventFilter;
    Refinanced(
      buyer?: PromiseOrValue<string> | null,
      downpayment?: null,
      fee?: null,
      oldEscrowId?: PromiseOrValue<BigNumberish> | null,
      newEscrowId?: PromiseOrValue<BigNumberish> | null
    ): RefinancedEventFilter;
  };

  estimateGas: {
    buySingleERC721WithETH(
      purchasePrice: PromiseOrValue<BigNumberish>,
      fillCalldata: PromiseOrValue<BytesLike>,
      vault: PromiseOrValue<string>,
      duration: PromiseOrValue<BigNumberish>,
      maxRepayment: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    currencyToken(overrides?: CallOverrides): Promise<BigNumber>;

    getCollateralLimits(
      vault: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quoteRefinance(
      balance: PromiseOrValue<BigNumberish>,
      downpayment: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      vault: PromiseOrValue<string>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quoteSingleERC721(
      purchasePrice: PromiseOrValue<BigNumberish>,
      downpayment: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      vault: PromiseOrValue<string>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    refinanceETH(
      escrowId: PromiseOrValue<BigNumberish>,
      vault: PromiseOrValue<string>,
      duration: PromiseOrValue<BigNumberish>,
      downpayment: PromiseOrValue<BigNumberish>,
      maxRepayment: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    buySingleERC721WithETH(
      purchasePrice: PromiseOrValue<BigNumberish>,
      fillCalldata: PromiseOrValue<BytesLike>,
      vault: PromiseOrValue<string>,
      duration: PromiseOrValue<BigNumberish>,
      maxRepayment: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    currencyToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCollateralLimits(
      vault: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    quoteRefinance(
      balance: PromiseOrValue<BigNumberish>,
      downpayment: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      vault: PromiseOrValue<string>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    quoteSingleERC721(
      purchasePrice: PromiseOrValue<BigNumberish>,
      downpayment: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      vault: PromiseOrValue<string>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    refinanceETH(
      escrowId: PromiseOrValue<BigNumberish>,
      vault: PromiseOrValue<string>,
      duration: PromiseOrValue<BigNumberish>,
      downpayment: PromiseOrValue<BigNumberish>,
      maxRepayment: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
