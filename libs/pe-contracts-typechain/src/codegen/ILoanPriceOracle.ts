/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from "./common";

export interface ILoanPriceOracleInterface extends utils.Interface {
  functions: {
    "currencyToken()": FunctionFragment;
    "priceLoan(address,uint256,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "priceLoanRepayment(address,uint256,uint256,uint256,uint256)": FunctionFragment;
  };

  getFunction(nameOrSignatureOrTopic: "currencyToken" | "priceLoan" | "priceLoanRepayment"): FunctionFragment;

  encodeFunctionData(functionFragment: "currencyToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "priceLoan",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "priceLoanRepayment",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(functionFragment: "currencyToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "priceLoan", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "priceLoanRepayment", data: BytesLike): Result;

  events: {};
}

export interface ILoanPriceOracle extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ILoanPriceOracleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    currencyToken(overrides?: CallOverrides): Promise<[string]>;

    priceLoan(
      collateralToken: PromiseOrValue<string>,
      collateralTokenId: PromiseOrValue<BigNumberish>,
      principal: PromiseOrValue<BigNumberish>,
      repayment: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      maturity: PromiseOrValue<BigNumberish>,
      utilization: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    priceLoanRepayment(
      collateralToken: PromiseOrValue<string>,
      collateralTokenId: PromiseOrValue<BigNumberish>,
      principal: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      utilization: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  currencyToken(overrides?: CallOverrides): Promise<string>;

  priceLoan(
    collateralToken: PromiseOrValue<string>,
    collateralTokenId: PromiseOrValue<BigNumberish>,
    principal: PromiseOrValue<BigNumberish>,
    repayment: PromiseOrValue<BigNumberish>,
    duration: PromiseOrValue<BigNumberish>,
    maturity: PromiseOrValue<BigNumberish>,
    utilization: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  priceLoanRepayment(
    collateralToken: PromiseOrValue<string>,
    collateralTokenId: PromiseOrValue<BigNumberish>,
    principal: PromiseOrValue<BigNumberish>,
    duration: PromiseOrValue<BigNumberish>,
    utilization: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    currencyToken(overrides?: CallOverrides): Promise<string>;

    priceLoan(
      collateralToken: PromiseOrValue<string>,
      collateralTokenId: PromiseOrValue<BigNumberish>,
      principal: PromiseOrValue<BigNumberish>,
      repayment: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      maturity: PromiseOrValue<BigNumberish>,
      utilization: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    priceLoanRepayment(
      collateralToken: PromiseOrValue<string>,
      collateralTokenId: PromiseOrValue<BigNumberish>,
      principal: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      utilization: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    currencyToken(overrides?: CallOverrides): Promise<BigNumber>;

    priceLoan(
      collateralToken: PromiseOrValue<string>,
      collateralTokenId: PromiseOrValue<BigNumberish>,
      principal: PromiseOrValue<BigNumberish>,
      repayment: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      maturity: PromiseOrValue<BigNumberish>,
      utilization: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    priceLoanRepayment(
      collateralToken: PromiseOrValue<string>,
      collateralTokenId: PromiseOrValue<BigNumberish>,
      principal: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      utilization: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    currencyToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    priceLoan(
      collateralToken: PromiseOrValue<string>,
      collateralTokenId: PromiseOrValue<BigNumberish>,
      principal: PromiseOrValue<BigNumberish>,
      repayment: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      maturity: PromiseOrValue<BigNumberish>,
      utilization: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    priceLoanRepayment(
      collateralToken: PromiseOrValue<string>,
      collateralTokenId: PromiseOrValue<BigNumberish>,
      principal: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      utilization: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
