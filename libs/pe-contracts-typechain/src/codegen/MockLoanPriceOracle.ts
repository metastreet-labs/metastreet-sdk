/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from "./common";

export declare namespace ILoanPriceOracleParameters {
  export type PiecewiseLinearModelStruct = {
    offset: PromiseOrValue<BigNumberish>;
    slope1: PromiseOrValue<BigNumberish>;
    slope2: PromiseOrValue<BigNumberish>;
    target: PromiseOrValue<BigNumberish>;
    max: PromiseOrValue<BigNumberish>;
  };

  export type PiecewiseLinearModelStructOutput = [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
    offset: BigNumber;
    slope1: BigNumber;
    slope2: BigNumber;
    target: BigNumber;
    max: BigNumber;
  };

  export type CollateralParametersStruct = {
    active: PromiseOrValue<boolean>;
    loanToValueRateComponent: ILoanPriceOracleParameters.PiecewiseLinearModelStruct;
    durationRateComponent: ILoanPriceOracleParameters.PiecewiseLinearModelStruct;
    rateComponentWeights: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>];
  };

  export type CollateralParametersStructOutput = [
    boolean,
    ILoanPriceOracleParameters.PiecewiseLinearModelStructOutput,
    ILoanPriceOracleParameters.PiecewiseLinearModelStructOutput,
    [number, number, number]
  ] & {
    active: boolean;
    loanToValueRateComponent: ILoanPriceOracleParameters.PiecewiseLinearModelStructOutput;
    durationRateComponent: ILoanPriceOracleParameters.PiecewiseLinearModelStructOutput;
    rateComponentWeights: [number, number, number];
  };
}

export interface MockLoanPriceOracleInterface extends utils.Interface {
  functions: {
    "collateralOracle()": FunctionFragment;
    "collateralValue(address,uint256)": FunctionFragment;
    "currencyToken()": FunctionFragment;
    "getCollateralParameters(address)": FunctionFragment;
    "minimumLoanDuration()": FunctionFragment;
    "priceLoan(address,uint256,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "priceLoanRepayment(address,uint256,uint256,uint256,uint256)": FunctionFragment;
    "setError(uint8)": FunctionFragment;
    "setPrice(uint256)": FunctionFragment;
    "setRepayment(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "collateralOracle"
      | "collateralValue"
      | "currencyToken"
      | "getCollateralParameters"
      | "minimumLoanDuration"
      | "priceLoan"
      | "priceLoanRepayment"
      | "setError"
      | "setPrice"
      | "setRepayment"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "collateralOracle", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "collateralValue",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "currencyToken", values?: undefined): string;
  encodeFunctionData(functionFragment: "getCollateralParameters", values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: "minimumLoanDuration", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "priceLoan",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "priceLoanRepayment",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "setError", values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: "setPrice", values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: "setRepayment", values: [PromiseOrValue<BigNumberish>]): string;

  decodeFunctionResult(functionFragment: "collateralOracle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "collateralValue", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "currencyToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getCollateralParameters", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "minimumLoanDuration", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "priceLoan", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "priceLoanRepayment", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setError", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setPrice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setRepayment", data: BytesLike): Result;

  events: {};
}

export interface MockLoanPriceOracle extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MockLoanPriceOracleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    collateralOracle(overrides?: CallOverrides): Promise<[string]>;

    collateralValue(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    currencyToken(overrides?: CallOverrides): Promise<[string]>;

    getCollateralParameters(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[ILoanPriceOracleParameters.CollateralParametersStructOutput]>;

    minimumLoanDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    priceLoan(
      collateralToken: PromiseOrValue<string>,
      collateralTokenId: PromiseOrValue<BigNumberish>,
      principal: PromiseOrValue<BigNumberish>,
      repayment: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      maturity: PromiseOrValue<BigNumberish>,
      utilization: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    priceLoanRepayment(
      collateralToken: PromiseOrValue<string>,
      collateralTokenId: PromiseOrValue<BigNumberish>,
      principal: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      utilization: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    setError(
      error: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPrice(
      price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRepayment(
      repayment: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  collateralOracle(overrides?: CallOverrides): Promise<string>;

  collateralValue(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  currencyToken(overrides?: CallOverrides): Promise<string>;

  getCollateralParameters(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<ILoanPriceOracleParameters.CollateralParametersStructOutput>;

  minimumLoanDuration(overrides?: CallOverrides): Promise<BigNumber>;

  priceLoan(
    collateralToken: PromiseOrValue<string>,
    collateralTokenId: PromiseOrValue<BigNumberish>,
    principal: PromiseOrValue<BigNumberish>,
    repayment: PromiseOrValue<BigNumberish>,
    duration: PromiseOrValue<BigNumberish>,
    maturity: PromiseOrValue<BigNumberish>,
    utilization: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  priceLoanRepayment(
    collateralToken: PromiseOrValue<string>,
    collateralTokenId: PromiseOrValue<BigNumberish>,
    principal: PromiseOrValue<BigNumberish>,
    duration: PromiseOrValue<BigNumberish>,
    utilization: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setError(
    error: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPrice(
    price: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRepayment(
    repayment: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    collateralOracle(overrides?: CallOverrides): Promise<string>;

    collateralValue(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currencyToken(overrides?: CallOverrides): Promise<string>;

    getCollateralParameters(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<ILoanPriceOracleParameters.CollateralParametersStructOutput>;

    minimumLoanDuration(overrides?: CallOverrides): Promise<BigNumber>;

    priceLoan(
      collateralToken: PromiseOrValue<string>,
      collateralTokenId: PromiseOrValue<BigNumberish>,
      principal: PromiseOrValue<BigNumberish>,
      repayment: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      maturity: PromiseOrValue<BigNumberish>,
      utilization: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    priceLoanRepayment(
      collateralToken: PromiseOrValue<string>,
      collateralTokenId: PromiseOrValue<BigNumberish>,
      principal: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      utilization: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setError(error: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    setPrice(price: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    setRepayment(repayment: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    collateralOracle(overrides?: CallOverrides): Promise<BigNumber>;

    collateralValue(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currencyToken(overrides?: CallOverrides): Promise<BigNumber>;

    getCollateralParameters(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    minimumLoanDuration(overrides?: CallOverrides): Promise<BigNumber>;

    priceLoan(
      collateralToken: PromiseOrValue<string>,
      collateralTokenId: PromiseOrValue<BigNumberish>,
      principal: PromiseOrValue<BigNumberish>,
      repayment: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      maturity: PromiseOrValue<BigNumberish>,
      utilization: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    priceLoanRepayment(
      collateralToken: PromiseOrValue<string>,
      collateralTokenId: PromiseOrValue<BigNumberish>,
      principal: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      utilization: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setError(
      error: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPrice(
      price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRepayment(
      repayment: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    collateralOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    collateralValue(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currencyToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCollateralParameters(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minimumLoanDuration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    priceLoan(
      collateralToken: PromiseOrValue<string>,
      collateralTokenId: PromiseOrValue<BigNumberish>,
      principal: PromiseOrValue<BigNumberish>,
      repayment: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      maturity: PromiseOrValue<BigNumberish>,
      utilization: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    priceLoanRepayment(
      collateralToken: PromiseOrValue<string>,
      collateralTokenId: PromiseOrValue<BigNumberish>,
      principal: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      utilization: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setError(
      error: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPrice(
      price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRepayment(
      repayment: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
