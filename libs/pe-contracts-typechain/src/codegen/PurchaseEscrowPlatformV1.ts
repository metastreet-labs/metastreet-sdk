/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from "./common";

export declare namespace IPurchaseEscrow {
  export type PurchaseEscrowTermsStruct = {
    status: PromiseOrValue<BigNumberish>;
    token: PromiseOrValue<string>;
    tokenId: PromiseOrValue<BigNumberish>;
    principal: PromiseOrValue<BigNumberish>;
    repayment: PromiseOrValue<BigNumberish>;
    startTime: PromiseOrValue<BigNumberish>;
    duration: PromiseOrValue<BigNumberish>;
  };

  export type PurchaseEscrowTermsStructOutput = [
    number,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    status: number;
    token: string;
    tokenId: BigNumber;
    principal: BigNumber;
    repayment: BigNumber;
    startTime: BigNumber;
    duration: BigNumber;
  };
}

export interface PurchaseEscrowPlatformV1Interface extends utils.Interface {
  functions: {
    "IMPLEMENTATION_VERSION()": FunctionFragment;
    "buyerNoteToken()": FunctionFragment;
    "create(address,address,uint256,uint256,uint256,uint64)": FunctionFragment;
    "currencyToken()": FunctionFragment;
    "lenderNoteToken()": FunctionFragment;
    "liquidate(uint256)": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "purchaseEscrows(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "repay(uint256)": FunctionFragment;
    "repayETH(uint256)": FunctionFragment;
    "setBuyerNoteTokenBaseURI(string)": FunctionFragment;
    "setLenderNoteTokenBaseURI(string)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "withdrawERC20(address,uint256)": FunctionFragment;
    "withdrawETH(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "IMPLEMENTATION_VERSION"
      | "buyerNoteToken"
      | "create"
      | "currencyToken"
      | "lenderNoteToken"
      | "liquidate"
      | "onERC721Received"
      | "owner"
      | "purchaseEscrows"
      | "renounceOwnership"
      | "repay"
      | "repayETH"
      | "setBuyerNoteTokenBaseURI"
      | "setLenderNoteTokenBaseURI"
      | "supportsInterface"
      | "transferOwnership"
      | "withdrawERC20"
      | "withdrawETH"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "IMPLEMENTATION_VERSION", values?: undefined): string;
  encodeFunctionData(functionFragment: "buyerNoteToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "create",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "currencyToken", values?: undefined): string;
  encodeFunctionData(functionFragment: "lenderNoteToken", values?: undefined): string;
  encodeFunctionData(functionFragment: "liquidate", values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "purchaseEscrows", values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
  encodeFunctionData(functionFragment: "repay", values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: "repayETH", values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: "setBuyerNoteTokenBaseURI", values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: "setLenderNoteTokenBaseURI", values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: "supportsInterface", values: [PromiseOrValue<BytesLike>]): string;
  encodeFunctionData(functionFragment: "transferOwnership", values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: "withdrawERC20",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "withdrawETH", values: [PromiseOrValue<BigNumberish>]): string;

  decodeFunctionResult(functionFragment: "IMPLEMENTATION_VERSION", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buyerNoteToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "create", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "currencyToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lenderNoteToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "liquidate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "onERC721Received", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "purchaseEscrows", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "repay", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "repayETH", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setBuyerNoteTokenBaseURI", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setLenderNoteTokenBaseURI", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "supportsInterface", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdrawERC20", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdrawETH", data: BytesLike): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "PurchaseEscrowCreated(uint256,address,address,address,uint256,uint256,uint256,uint64)": EventFragment;
    "PurchaseEscrowLiquidated(uint256)": EventFragment;
    "PurchaseEscrowRepaid(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PurchaseEscrowCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PurchaseEscrowLiquidated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PurchaseEscrowRepaid"): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<[string, string], OwnershipTransferredEventObject>;

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;

export interface PurchaseEscrowCreatedEventObject {
  escrowId: BigNumber;
  lender: string;
  buyer: string;
  token: string;
  tokenId: BigNumber;
  principal: BigNumber;
  repayment: BigNumber;
  duration: BigNumber;
}
export type PurchaseEscrowCreatedEvent = TypedEvent<
  [BigNumber, string, string, string, BigNumber, BigNumber, BigNumber, BigNumber],
  PurchaseEscrowCreatedEventObject
>;

export type PurchaseEscrowCreatedEventFilter = TypedEventFilter<PurchaseEscrowCreatedEvent>;

export interface PurchaseEscrowLiquidatedEventObject {
  escrowId: BigNumber;
}
export type PurchaseEscrowLiquidatedEvent = TypedEvent<[BigNumber], PurchaseEscrowLiquidatedEventObject>;

export type PurchaseEscrowLiquidatedEventFilter = TypedEventFilter<PurchaseEscrowLiquidatedEvent>;

export interface PurchaseEscrowRepaidEventObject {
  escrowId: BigNumber;
}
export type PurchaseEscrowRepaidEvent = TypedEvent<[BigNumber], PurchaseEscrowRepaidEventObject>;

export type PurchaseEscrowRepaidEventFilter = TypedEventFilter<PurchaseEscrowRepaidEvent>;

export interface PurchaseEscrowPlatformV1 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PurchaseEscrowPlatformV1Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    IMPLEMENTATION_VERSION(overrides?: CallOverrides): Promise<[string]>;

    buyerNoteToken(overrides?: CallOverrides): Promise<[string]>;

    create(
      buyer: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      principal: PromiseOrValue<BigNumberish>,
      repayment: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    currencyToken(overrides?: CallOverrides): Promise<[string]>;

    lenderNoteToken(overrides?: CallOverrides): Promise<[string]>;

    liquidate(
      escrowId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    purchaseEscrows(
      escrowId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[IPurchaseEscrow.PurchaseEscrowTermsStructOutput]>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    repay(
      escrowId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    repayETH(
      escrowId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setBuyerNoteTokenBaseURI(
      baseURI: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setLenderNoteTokenBaseURI(
      baseURI: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawERC20(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawETH(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  IMPLEMENTATION_VERSION(overrides?: CallOverrides): Promise<string>;

  buyerNoteToken(overrides?: CallOverrides): Promise<string>;

  create(
    buyer: PromiseOrValue<string>,
    token: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    principal: PromiseOrValue<BigNumberish>,
    repayment: PromiseOrValue<BigNumberish>,
    duration: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  currencyToken(overrides?: CallOverrides): Promise<string>;

  lenderNoteToken(overrides?: CallOverrides): Promise<string>;

  liquidate(
    escrowId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  onERC721Received(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<BigNumberish>,
    arg3: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  purchaseEscrows(
    escrowId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IPurchaseEscrow.PurchaseEscrowTermsStructOutput>;

  renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  repay(
    escrowId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  repayETH(
    escrowId: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setBuyerNoteTokenBaseURI(
    baseURI: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setLenderNoteTokenBaseURI(
    baseURI: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawERC20(
    token: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawETH(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    IMPLEMENTATION_VERSION(overrides?: CallOverrides): Promise<string>;

    buyerNoteToken(overrides?: CallOverrides): Promise<string>;

    create(
      buyer: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      principal: PromiseOrValue<BigNumberish>,
      repayment: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currencyToken(overrides?: CallOverrides): Promise<string>;

    lenderNoteToken(overrides?: CallOverrides): Promise<string>;

    liquidate(escrowId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    purchaseEscrows(
      escrowId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IPurchaseEscrow.PurchaseEscrowTermsStructOutput>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    repay(escrowId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    repayETH(escrowId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    setBuyerNoteTokenBaseURI(baseURI: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setLenderNoteTokenBaseURI(baseURI: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;

    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    withdrawERC20(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawETH(amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "PurchaseEscrowCreated(uint256,address,address,address,uint256,uint256,uint256,uint64)"(
      escrowId?: PromiseOrValue<BigNumberish> | null,
      lender?: null,
      buyer?: null,
      token?: null,
      tokenId?: null,
      principal?: null,
      repayment?: null,
      duration?: null
    ): PurchaseEscrowCreatedEventFilter;
    PurchaseEscrowCreated(
      escrowId?: PromiseOrValue<BigNumberish> | null,
      lender?: null,
      buyer?: null,
      token?: null,
      tokenId?: null,
      principal?: null,
      repayment?: null,
      duration?: null
    ): PurchaseEscrowCreatedEventFilter;

    "PurchaseEscrowLiquidated(uint256)"(
      escrowId?: PromiseOrValue<BigNumberish> | null
    ): PurchaseEscrowLiquidatedEventFilter;
    PurchaseEscrowLiquidated(escrowId?: PromiseOrValue<BigNumberish> | null): PurchaseEscrowLiquidatedEventFilter;

    "PurchaseEscrowRepaid(uint256)"(escrowId?: PromiseOrValue<BigNumberish> | null): PurchaseEscrowRepaidEventFilter;
    PurchaseEscrowRepaid(escrowId?: PromiseOrValue<BigNumberish> | null): PurchaseEscrowRepaidEventFilter;
  };

  estimateGas: {
    IMPLEMENTATION_VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    buyerNoteToken(overrides?: CallOverrides): Promise<BigNumber>;

    create(
      buyer: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      principal: PromiseOrValue<BigNumberish>,
      repayment: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    currencyToken(overrides?: CallOverrides): Promise<BigNumber>;

    lenderNoteToken(overrides?: CallOverrides): Promise<BigNumber>;

    liquidate(
      escrowId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    purchaseEscrows(escrowId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    repay(
      escrowId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    repayETH(
      escrowId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setBuyerNoteTokenBaseURI(
      baseURI: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setLenderNoteTokenBaseURI(
      baseURI: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawERC20(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawETH(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    IMPLEMENTATION_VERSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    buyerNoteToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    create(
      buyer: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      principal: PromiseOrValue<BigNumberish>,
      repayment: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    currencyToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lenderNoteToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquidate(
      escrowId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    purchaseEscrows(escrowId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    repay(
      escrowId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    repayETH(
      escrowId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setBuyerNoteTokenBaseURI(
      baseURI: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setLenderNoteTokenBaseURI(
      baseURI: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawERC20(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawETH(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
